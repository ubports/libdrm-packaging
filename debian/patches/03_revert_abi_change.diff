Revert nouveau ABI change to match what is in 2.6.33.

This reverts commits after b496c63143e9a4ca02011582329bce2df99d9b7c
except those that only touch the build system:
  e73af7f560c95ba9c665bead7fc8eb1471db9975
  976e779f9cd0571dd2c218580485b39d37bd18a0

diff --git a/include/drm/nouveau_drm.h b/include/drm/nouveau_drm.h
index a6a9f4a..f745948 100644
--- a/include/drm/nouveau_drm.h
+++ b/include/drm/nouveau_drm.h
@@ -25,14 +25,13 @@
 #ifndef __NOUVEAU_DRM_H__
 #define __NOUVEAU_DRM_H__
 
-#define NOUVEAU_DRM_HEADER_PATCHLEVEL 16
+#define NOUVEAU_DRM_HEADER_PATCHLEVEL 15
 
 struct drm_nouveau_channel_alloc {
 	uint32_t     fb_ctxdma_handle;
 	uint32_t     tt_ctxdma_handle;
 
 	int          channel;
-	uint32_t     pushbuf_domains;
 
 	/* Notifier memory */
 	uint32_t     notifier_handle;
@@ -110,58 +109,68 @@ struct drm_nouveau_gem_new {
 	uint32_t align;
 };
 
-#define NOUVEAU_GEM_MAX_BUFFERS 1024
-struct drm_nouveau_gem_pushbuf_bo_presumed {
-	uint32_t valid;
-	uint32_t domain;
-	uint64_t offset;
-};
-
 struct drm_nouveau_gem_pushbuf_bo {
 	uint64_t user_priv;
 	uint32_t handle;
 	uint32_t read_domains;
 	uint32_t write_domains;
 	uint32_t valid_domains;
-	struct drm_nouveau_gem_pushbuf_bo_presumed presumed;
+	uint32_t presumed_ok;
+	uint32_t presumed_domain;
+	uint64_t presumed_offset;
 };
 
 #define NOUVEAU_GEM_RELOC_LOW  (1 << 0)
 #define NOUVEAU_GEM_RELOC_HIGH (1 << 1)
 #define NOUVEAU_GEM_RELOC_OR   (1 << 2)
-#define NOUVEAU_GEM_MAX_RELOCS 1024
 struct drm_nouveau_gem_pushbuf_reloc {
-	uint32_t reloc_bo_index;
-	uint32_t reloc_bo_offset;
 	uint32_t bo_index;
+	uint32_t reloc_index;
 	uint32_t flags;
 	uint32_t data;
 	uint32_t vor;
 	uint32_t tor;
 };
 
-#define NOUVEAU_GEM_MAX_PUSH 512
-struct drm_nouveau_gem_pushbuf_push {
-	uint32_t bo_index;
-	uint32_t pad;
-	uint64_t offset;
-	uint64_t length;
-};
+#define NOUVEAU_GEM_MAX_BUFFERS 1024
+#define NOUVEAU_GEM_MAX_RELOCS 1024
 
 struct drm_nouveau_gem_pushbuf {
 	uint32_t channel;
+	uint32_t nr_dwords;
 	uint32_t nr_buffers;
+	uint32_t nr_relocs;
+	uint64_t dwords;
 	uint64_t buffers;
+	uint64_t relocs;
+};
+
+struct drm_nouveau_gem_pushbuf_call {
+	uint32_t channel;
+	uint32_t handle;
+	uint32_t offset;
+	uint32_t nr_buffers;
 	uint32_t nr_relocs;
-	uint32_t nr_push;
+	uint32_t nr_dwords;
+	uint64_t buffers;
 	uint64_t relocs;
-	uint64_t push;
 	uint32_t suffix0;
 	uint32_t suffix1;
+	/* below only accessed for CALL2 */
 	uint64_t vram_available;
 	uint64_t gart_available;
 };
 
+struct drm_nouveau_gem_pin {
+	uint32_t handle;
+	uint32_t domain;
+	uint64_t offset;
+};
+
+struct drm_nouveau_gem_unpin {
+	uint32_t handle;
+};
+
 #define NOUVEAU_GEM_CPU_PREP_NOWAIT                                  0x00000001
 #define NOUVEAU_GEM_CPU_PREP_NOBLOCK                                 0x00000002
 #define NOUVEAU_GEM_CPU_PREP_WRITE                                   0x00000004
@@ -174,6 +183,14 @@ struct drm_nouveau_gem_cpu_fini {
 	uint32_t handle;
 };
 
+struct drm_nouveau_gem_tile {
+	uint32_t handle;
+	uint32_t offset;
+	uint32_t size;
+	uint32_t tile_mode;
+	uint32_t tile_flags;
+};
+
 enum nouveau_bus_type {
 	NV_AGP     = 0,
 	NV_PCI     = 1,
@@ -183,17 +200,22 @@ enum nouveau_bus_type {
 struct drm_nouveau_sarea {
 };
 
-#define DRM_NOUVEAU_GETPARAM           0x00
-#define DRM_NOUVEAU_SETPARAM           0x01
-#define DRM_NOUVEAU_CHANNEL_ALLOC      0x02
-#define DRM_NOUVEAU_CHANNEL_FREE       0x03
-#define DRM_NOUVEAU_GROBJ_ALLOC        0x04
-#define DRM_NOUVEAU_NOTIFIEROBJ_ALLOC  0x05
-#define DRM_NOUVEAU_GPUOBJ_FREE        0x06
+#define DRM_NOUVEAU_CARD_INIT          0x00
+#define DRM_NOUVEAU_GETPARAM           0x01
+#define DRM_NOUVEAU_SETPARAM           0x02
+#define DRM_NOUVEAU_CHANNEL_ALLOC      0x03
+#define DRM_NOUVEAU_CHANNEL_FREE       0x04
+#define DRM_NOUVEAU_GROBJ_ALLOC        0x05
+#define DRM_NOUVEAU_NOTIFIEROBJ_ALLOC  0x06
+#define DRM_NOUVEAU_GPUOBJ_FREE        0x07
 #define DRM_NOUVEAU_GEM_NEW            0x40
 #define DRM_NOUVEAU_GEM_PUSHBUF        0x41
-#define DRM_NOUVEAU_GEM_CPU_PREP       0x42
-#define DRM_NOUVEAU_GEM_CPU_FINI       0x43
-#define DRM_NOUVEAU_GEM_INFO           0x44
+#define DRM_NOUVEAU_GEM_PUSHBUF_CALL   0x42
+#define DRM_NOUVEAU_GEM_PIN            0x43 /* !KMS only */
+#define DRM_NOUVEAU_GEM_UNPIN          0x44 /* !KMS only */
+#define DRM_NOUVEAU_GEM_CPU_PREP       0x45
+#define DRM_NOUVEAU_GEM_CPU_FINI       0x46
+#define DRM_NOUVEAU_GEM_INFO           0x47
+#define DRM_NOUVEAU_GEM_PUSHBUF_CALL2  0x48
 
 #endif /* __NOUVEAU_DRM_H__ */
diff --git a/nouveau/Makefile.am b/nouveau/Makefile.am
index b6d214a..217b7ef 100644
--- a/nouveau/Makefile.am
+++ b/nouveau/Makefile.am
@@ -18,8 +18,7 @@ libdrm_nouveau_la_SOURCES = \
 			    nouveau_notifier.c \
 			    nouveau_bo.c \
 			    nouveau_resource.c \
-			    nouveau_private.h \
-			    nouveau_reloc.c
+			    nouveau_private.h
 
 libdrm_nouveaucommonincludedir = ${includedir}/nouveau
 libdrm_nouveaucommoninclude_HEADERS = \
@@ -30,8 +29,7 @@ libdrm_nouveaucommoninclude_HEADERS = \
 				nouveau_pushbuf.h \
 				nouveau_bo.h \
 				nouveau_resource.h \
-				nouveau_class.h \
-				nouveau_reloc.h
+				nouveau_class.h
 
 
 libdrm_nouveauincludedir = ${includedir}/libdrm
diff --git a/nouveau/nouveau_bo.c b/nouveau/nouveau_bo.c
index 32b23b6..10cc8a6 100644
--- a/nouveau/nouveau_bo.c
+++ b/nouveau/nouveau_bo.c
@@ -198,9 +198,17 @@ nouveau_bo_new_tile(struct nouveau_device *dev, uint32_t flags, int align,
 	if (flags & (NOUVEAU_BO_VRAM | NOUVEAU_BO_GART)) {
 		ret = nouveau_bo_kalloc(nvbo, NULL);
 		if (ret) {
-			nouveau_bo_ref(NULL, (void *)&nvbo);
+			nouveau_bo_ref(NULL, (void *)nvbo);
 			return ret;
 		}
+
+		if (flags & NOUVEAU_BO_PIN) {
+			ret = nouveau_bo_pin((void *)nvbo, nvbo->flags);
+			if (ret) {
+				nouveau_bo_ref(NULL, (void *)nvbo);
+				return ret;
+			}
+		}
 	}
 
 	*bo = &nvbo->base;
@@ -211,7 +219,16 @@ int
 nouveau_bo_new(struct nouveau_device *dev, uint32_t flags, int align,
 	       int size, struct nouveau_bo **bo)
 {
-	return nouveau_bo_new_tile(dev, flags, align, size, 0, 0, bo);
+	uint32_t tile_flags = 0;
+
+	if (flags & NOUVEAU_BO_TILED) {
+		if (flags & NOUVEAU_BO_ZTILE)
+			tile_flags = 0x2800;
+		else
+			tile_flags = 0x7000;
+	}
+
+	return nouveau_bo_new_tile(dev, flags, align, size, 0, tile_flags, bo);
 }
 
 int
@@ -466,6 +483,62 @@ nouveau_bo_unmap(struct nouveau_bo *bo)
 }
 
 int
+nouveau_bo_pin(struct nouveau_bo *bo, uint32_t flags)
+{
+	struct nouveau_device_priv *nvdev = nouveau_device(bo->device);
+	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
+	struct drm_nouveau_gem_pin req;
+	int ret;
+
+	if (nvbo->pinned)
+		return 0;
+
+	if (!nvbo->handle)
+		return -EINVAL;
+
+	/* Now force it to stay put :) */
+	req.handle = nvbo->handle;
+	req.domain = 0;
+	if (flags & NOUVEAU_BO_VRAM)
+		req.domain |= NOUVEAU_GEM_DOMAIN_VRAM;
+	if (flags & NOUVEAU_BO_GART)
+		req.domain |= NOUVEAU_GEM_DOMAIN_GART;
+
+	ret = drmCommandWriteRead(nvdev->fd, DRM_NOUVEAU_GEM_PIN, &req,
+				  sizeof(struct drm_nouveau_gem_pin));
+	if (ret)
+		return ret;
+	nvbo->offset = req.offset;
+	nvbo->domain = req.domain;
+	nvbo->pinned = 1;
+
+	/* Fill in public nouveau_bo members */
+	if (nvbo->domain & NOUVEAU_GEM_DOMAIN_VRAM)
+		bo->flags = NOUVEAU_BO_VRAM;
+	if (nvbo->domain & NOUVEAU_GEM_DOMAIN_GART)
+		bo->flags = NOUVEAU_BO_GART;
+	bo->offset = nvbo->offset;
+
+	return 0;
+}
+
+void
+nouveau_bo_unpin(struct nouveau_bo *bo)
+{
+	struct nouveau_device_priv *nvdev = nouveau_device(bo->device);
+	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
+	struct drm_nouveau_gem_unpin req;
+
+	if (!nvbo->pinned)
+		return;
+
+	req.handle = nvbo->handle;
+	drmCommandWrite(nvdev->fd, DRM_NOUVEAU_GEM_UNPIN, &req, sizeof(req));
+
+	nvbo->pinned = bo->offset = bo->flags = 0;
+}
+
+int
 nouveau_bo_busy(struct nouveau_bo *bo, uint32_t access)
 {
 	return nouveau_bo_wait(bo, (access & NOUVEAU_BO_WR), 1, 1);
@@ -492,7 +565,7 @@ nouveau_bo_pending(struct nouveau_bo *bo)
 struct drm_nouveau_gem_pushbuf_bo *
 nouveau_bo_emit_buffer(struct nouveau_channel *chan, struct nouveau_bo *bo)
 {
-	struct nouveau_pushbuf_priv *nvpb = &nouveau_channel(chan)->pb;
+	struct nouveau_pushbuf_priv *nvpb = nouveau_pushbuf(chan->pushbuf);
 	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
 	struct drm_nouveau_gem_pushbuf_bo *pbbo;
 	struct nouveau_bo *ref = NULL;
@@ -534,8 +607,8 @@ nouveau_bo_emit_buffer(struct nouveau_channel *chan, struct nouveau_bo *bo)
 	pbbo->valid_domains = NOUVEAU_GEM_DOMAIN_VRAM | NOUVEAU_GEM_DOMAIN_GART;
 	pbbo->read_domains = 0;
 	pbbo->write_domains = 0;
-	pbbo->presumed.domain = nvbo->domain;
-	pbbo->presumed.offset = nvbo->offset;
-	pbbo->presumed.valid = 1;
+	pbbo->presumed_domain = nvbo->domain;
+	pbbo->presumed_offset = nvbo->offset;
+	pbbo->presumed_ok = 1;
 	return pbbo;
 }
diff --git a/nouveau/nouveau_bo.h b/nouveau/nouveau_bo.h
index 1e77ab0..fdad63e 100644
--- a/nouveau/nouveau_bo.h
+++ b/nouveau/nouveau_bo.h
@@ -30,9 +30,13 @@
 #define NOUVEAU_BO_WR     (1 << 3)
 #define NOUVEAU_BO_RDWR   (NOUVEAU_BO_RD | NOUVEAU_BO_WR)
 #define NOUVEAU_BO_MAP    (1 << 4)
+#define NOUVEAU_BO_PIN    (1 << 5)
 #define NOUVEAU_BO_LOW    (1 << 6)
 #define NOUVEAU_BO_HIGH   (1 << 7)
 #define NOUVEAU_BO_OR     (1 << 8)
+#define NOUVEAU_BO_LOCAL  (1 << 9)
+#define NOUVEAU_BO_TILED  (1 << 10)
+#define NOUVEAU_BO_ZTILE  (1 << 11)
 #define NOUVEAU_BO_INVAL  (1 << 12)
 #define NOUVEAU_BO_NOSYNC (1 << 13)
 #define NOUVEAU_BO_NOWAIT (1 << 14)
@@ -48,6 +52,10 @@ struct nouveau_bo {
 
 	uint32_t tile_mode;
 	uint32_t tile_flags;
+
+	/* Available when buffer is pinned *only* */
+	uint32_t flags;
+	uint64_t offset;
 };
 
 int
@@ -90,6 +98,12 @@ void
 nouveau_bo_unmap(struct nouveau_bo *);
 
 int
+nouveau_bo_pin(struct nouveau_bo *, uint32_t flags);
+
+void
+nouveau_bo_unpin(struct nouveau_bo *);
+
+int
 nouveau_bo_busy(struct nouveau_bo *, uint32_t access);
 
 uint32_t
diff --git a/nouveau/nouveau_channel.c b/nouveau/nouveau_channel.c
index 40a0b34..5622c1d 100644
--- a/nouveau/nouveau_channel.c
+++ b/nouveau/nouveau_channel.c
@@ -106,7 +106,7 @@ nouveau_channel_free(struct nouveau_channel **chan)
 	struct nouveau_channel_priv *nvchan;
 	struct nouveau_device_priv *nvdev;
 	struct drm_nouveau_channel_free cf;
-	unsigned i;
+	int i;
 
 	if (!chan || !*chan)
 		return;
diff --git a/nouveau/nouveau_channel.h b/nouveau/nouveau_channel.h
index ddcf8e4..294f749 100644
--- a/nouveau/nouveau_channel.h
+++ b/nouveau/nouveau_channel.h
@@ -29,12 +29,11 @@ struct nouveau_subchannel {
 };
 
 struct nouveau_channel {
-	uint32_t *cur;
-	uint32_t *end;
-
 	struct nouveau_device *device;
 	int id;
 
+	struct nouveau_pushbuf *pushbuf;
+
 	struct nouveau_grobj *nullobj;
 	struct nouveau_grobj *vram;
 	struct nouveau_grobj *gart;
diff --git a/nouveau/nouveau_class.h b/nouveau/nouveau_class.h
index 0167cbc..8e7d0ff 100644
--- a/nouveau/nouveau_class.h
+++ b/nouveau/nouveau_class.h
@@ -1549,7 +1549,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_GOURAUD				0x00000080
 #define    NV04_TEXTURED_TRIANGLE_BLEND_SHADE_MODE_PHONG				0x000000c0
 #define   NV04_TEXTURED_TRIANGLE_BLEND_TEXTURE_PERSPECTIVE_ENABLE			(1 <<  8)
-#define   NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE					(1 << 12)
+#define   NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE_SHIFT				12
+#define   NV04_TEXTURED_TRIANGLE_BLEND_SPECULAR_ENABLE_MASK				0x0000f000
 #define   NV04_TEXTURED_TRIANGLE_BLEND_FOG_ENABLE					(1 << 16)
 #define   NV04_TEXTURED_TRIANGLE_BLEND_BLEND_ENABLE					(1 << 20)
 #define   NV04_TEXTURED_TRIANGLE_BLEND_SRC_SHIFT					24
@@ -1797,7 +1798,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV04_MULTITEX_TRIANGLE_BLEND_SHADE_MODE_GOURAUD				0x00000080
 #define    NV04_MULTITEX_TRIANGLE_BLEND_SHADE_MODE_PHONG				0x000000c0
 #define   NV04_MULTITEX_TRIANGLE_BLEND_TEXTURE_PERSPECTIVE_ENABLE			(1 <<  8)
-#define   NV04_MULTITEX_TRIANGLE_BLEND_SPECULAR_ENABLE					(1 << 12)
+#define   NV04_MULTITEX_TRIANGLE_BLEND_SPECULAR_ENABLE_SHIFT				12
+#define   NV04_MULTITEX_TRIANGLE_BLEND_SPECULAR_ENABLE_MASK				0x0000f000
 #define   NV04_MULTITEX_TRIANGLE_BLEND_FOG_ENABLE					(1 << 16)
 #define   NV04_MULTITEX_TRIANGLE_BLEND_BLEND_ENABLE					(1 << 20)
 #define   NV04_MULTITEX_TRIANGLE_BLEND_SRC_SHIFT					24
@@ -1961,10 +1963,11 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV10TCL_TX_FORMAT_DMA1							(1 <<  1)
 #define   NV10TCL_TX_FORMAT_CUBE_MAP							(1 <<  2)
 #define   NV10TCL_TX_FORMAT_FORMAT_SHIFT						7
-#define   NV10TCL_TX_FORMAT_FORMAT_MASK							0x00000f80
+#define   NV10TCL_TX_FORMAT_FORMAT_MASK							0x00000780
 #define    NV10TCL_TX_FORMAT_FORMAT_L8							0x00000000
 #define    NV10TCL_TX_FORMAT_FORMAT_A8							0x00000080
 #define    NV10TCL_TX_FORMAT_FORMAT_A1R5G5B5						0x00000100
+#define    NV10TCL_TX_FORMAT_FORMAT_A8_RECT						0x00000180
 #define    NV10TCL_TX_FORMAT_FORMAT_A4R4G4B4						0x00000200
 #define    NV10TCL_TX_FORMAT_FORMAT_R5G6B5						0x00000280
 #define    NV10TCL_TX_FORMAT_FORMAT_A8R8G8B8						0x00000300
@@ -1976,7 +1979,25 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV10TCL_TX_FORMAT_FORMAT_A1R5G5B5_RECT					0x00000800
 #define    NV10TCL_TX_FORMAT_FORMAT_R5G6B5_RECT						0x00000880
 #define    NV10TCL_TX_FORMAT_FORMAT_A8R8G8B8_RECT					0x00000900
-#define    NV10TCL_TX_FORMAT_FORMAT_A8_RECT						0x00000980
+#define    NV10TCL_TX_FORMAT_FORMAT_L8_RECT						0x00000980
+#define    NV10TCL_TX_FORMAT_FORMAT_A8L8						0x00000d00
+#define    NV10TCL_TX_FORMAT_FORMAT_A8_RECT2						0x00000d80
+#define    NV10TCL_TX_FORMAT_FORMAT_A4R4G4B4_RECT					0x00000e80
+#define    NV10TCL_TX_FORMAT_FORMAT_R8G8B8_RECT						0x00000f00
+#define    NV10TCL_TX_FORMAT_FORMAT_L8A8_RECT						0x00001000
+#define    NV10TCL_TX_FORMAT_FORMAT_DSDT						0x00001400
+#define    NV10TCL_TX_FORMAT_FORMAT_A16							0x00001900
+#define    NV10TCL_TX_FORMAT_FORMAT_HILO16						0x00001980
+#define    NV10TCL_TX_FORMAT_FORMAT_A16_RECT						0x00001a80
+#define    NV10TCL_TX_FORMAT_FORMAT_HILO16_RECT						0x00001b00
+#define    NV10TCL_TX_FORMAT_FORMAT_HILO8						0x00002200
+#define    NV10TCL_TX_FORMAT_FORMAT_SIGNED_HILO8					0x00002280
+#define    NV10TCL_TX_FORMAT_FORMAT_HILO8_RECT						0x00002300
+#define    NV10TCL_TX_FORMAT_FORMAT_SIGNED_HILO8_RECT					0x00002380
+#define    NV10TCL_TX_FORMAT_FORMAT_FLOAT_RGBA16_NV					0x00002500
+#define    NV10TCL_TX_FORMAT_FORMAT_FLOAT_RGBA32_NV					0x00002580
+#define    NV10TCL_TX_FORMAT_FORMAT_FLOAT_R32_NV					0x00002600
+#define   NV10TCL_TX_FORMAT_NPOT							(1 << 11)
 #define   NV10TCL_TX_FORMAT_MIPMAP							(1 << 15)
 #define   NV10TCL_TX_FORMAT_BASE_SIZE_U_SHIFT						16
 #define   NV10TCL_TX_FORMAT_BASE_SIZE_U_MASK						0x000f0000
@@ -2617,7 +2638,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV10TCL_RC_FINAL1_E_MAPPING_SIGNED_IDENTITY					0xc0000000
 #define    NV10TCL_RC_FINAL1_E_MAPPING_SIGNED_NEGATE					0xe0000000
 #define  NV10TCL_LIGHT_MODEL								0x00000294
-#define   NV10TCL_LIGHT_MODEL_VERTEX_SPECULAR						(1 <<  0)
 #define   NV10TCL_LIGHT_MODEL_SEPARATE_SPECULAR						(1 <<  1)
 #define   NV10TCL_LIGHT_MODEL_LOCAL_VIEWER						(1 << 16)
 #define  NV10TCL_COLOR_MATERIAL								0x00000298
@@ -2866,38 +2886,38 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV10TCL_ENABLED_LIGHTS_7_NONPOSITIONAL					0x00004000
 #define    NV10TCL_ENABLED_LIGHTS_7_POSITIONAL						0x00008000
 #define    NV10TCL_ENABLED_LIGHTS_7_DIRECTIONAL						0x0000c000
-#define  NV10TCL_TX_GEN_MODE_S(x)							(0x000003c0+((x)*16))
-#define  NV10TCL_TX_GEN_MODE_S__SIZE							0x00000002
-#define   NV10TCL_TX_GEN_MODE_S_FALSE							0x00000000
-#define   NV10TCL_TX_GEN_MODE_S_EYE_LINEAR						0x00002400
-#define   NV10TCL_TX_GEN_MODE_S_OBJECT_LINEAR						0x00002401
-#define   NV10TCL_TX_GEN_MODE_S_SPHERE_MAP						0x00002402
-#define   NV10TCL_TX_GEN_MODE_S_NORMAL_MAP						0x00008511
-#define   NV10TCL_TX_GEN_MODE_S_REFLECTION_MAP						0x00008512
-#define  NV10TCL_TX_GEN_MODE_T(x)							(0x000003c4+((x)*16))
-#define  NV10TCL_TX_GEN_MODE_T__SIZE							0x00000002
-#define   NV10TCL_TX_GEN_MODE_T_FALSE							0x00000000
-#define   NV10TCL_TX_GEN_MODE_T_EYE_LINEAR						0x00002400
-#define   NV10TCL_TX_GEN_MODE_T_OBJECT_LINEAR						0x00002401
-#define   NV10TCL_TX_GEN_MODE_T_SPHERE_MAP						0x00002402
-#define   NV10TCL_TX_GEN_MODE_T_NORMAL_MAP						0x00008511
-#define   NV10TCL_TX_GEN_MODE_T_REFLECTION_MAP						0x00008512
-#define  NV10TCL_TX_GEN_MODE_R(x)							(0x000003c8+((x)*16))
-#define  NV10TCL_TX_GEN_MODE_R__SIZE							0x00000002
-#define   NV10TCL_TX_GEN_MODE_R_FALSE							0x00000000
-#define   NV10TCL_TX_GEN_MODE_R_EYE_LINEAR						0x00002400
-#define   NV10TCL_TX_GEN_MODE_R_OBJECT_LINEAR						0x00002401
-#define   NV10TCL_TX_GEN_MODE_R_SPHERE_MAP						0x00002402
-#define   NV10TCL_TX_GEN_MODE_R_NORMAL_MAP						0x00008511
-#define   NV10TCL_TX_GEN_MODE_R_REFLECTION_MAP						0x00008512
-#define  NV10TCL_TX_GEN_MODE_Q(x)							(0x000003cc+((x)*16))
-#define  NV10TCL_TX_GEN_MODE_Q__SIZE							0x00000002
-#define   NV10TCL_TX_GEN_MODE_Q_FALSE							0x00000000
-#define   NV10TCL_TX_GEN_MODE_Q_EYE_LINEAR						0x00002400
-#define   NV10TCL_TX_GEN_MODE_Q_OBJECT_LINEAR						0x00002401
-#define   NV10TCL_TX_GEN_MODE_Q_SPHERE_MAP						0x00002402
-#define   NV10TCL_TX_GEN_MODE_Q_NORMAL_MAP						0x00008511
-#define   NV10TCL_TX_GEN_MODE_Q_REFLECTION_MAP						0x00008512
+#define  NV10TCL_TX_GEN_S(x)								(0x000003c0+((x)*16))
+#define  NV10TCL_TX_GEN_S__SIZE								0x00000002
+#define   NV10TCL_TX_GEN_S_FALSE							0x00000000
+#define   NV10TCL_TX_GEN_S_EYE_LINEAR							0x00002400
+#define   NV10TCL_TX_GEN_S_OBJECT_LINEAR						0x00002401
+#define   NV10TCL_TX_GEN_S_SPHERE_MAP							0x00002402
+#define   NV10TCL_TX_GEN_S_NORMAL_MAP							0x00008511
+#define   NV10TCL_TX_GEN_S_REFLECTION_MAP						0x00008512
+#define  NV10TCL_TX_GEN_T(x)								(0x000003c4+((x)*16))
+#define  NV10TCL_TX_GEN_T__SIZE								0x00000002
+#define   NV10TCL_TX_GEN_T_FALSE							0x00000000
+#define   NV10TCL_TX_GEN_T_EYE_LINEAR							0x00002400
+#define   NV10TCL_TX_GEN_T_OBJECT_LINEAR						0x00002401
+#define   NV10TCL_TX_GEN_T_SPHERE_MAP							0x00002402
+#define   NV10TCL_TX_GEN_T_NORMAL_MAP							0x00008511
+#define   NV10TCL_TX_GEN_T_REFLECTION_MAP						0x00008512
+#define  NV10TCL_TX_GEN_R(x)								(0x000003c8+((x)*16))
+#define  NV10TCL_TX_GEN_R__SIZE								0x00000002
+#define   NV10TCL_TX_GEN_R_FALSE							0x00000000
+#define   NV10TCL_TX_GEN_R_EYE_LINEAR							0x00002400
+#define   NV10TCL_TX_GEN_R_OBJECT_LINEAR						0x00002401
+#define   NV10TCL_TX_GEN_R_SPHERE_MAP							0x00002402
+#define   NV10TCL_TX_GEN_R_NORMAL_MAP							0x00008511
+#define   NV10TCL_TX_GEN_R_REFLECTION_MAP						0x00008512
+#define  NV10TCL_TX_GEN_Q(x)								(0x000003cc+((x)*16))
+#define  NV10TCL_TX_GEN_Q__SIZE								0x00000002
+#define   NV10TCL_TX_GEN_Q_FALSE							0x00000000
+#define   NV10TCL_TX_GEN_Q_EYE_LINEAR							0x00002400
+#define   NV10TCL_TX_GEN_Q_OBJECT_LINEAR						0x00002401
+#define   NV10TCL_TX_GEN_Q_SPHERE_MAP							0x00002402
+#define   NV10TCL_TX_GEN_Q_NORMAL_MAP							0x00008511
+#define   NV10TCL_TX_GEN_Q_REFLECTION_MAP						0x00008512
 #define  NV10TCL_TX_MATRIX_ENABLE(x)							(0x000003e0+((x)*4))
 #define  NV10TCL_TX_MATRIX_ENABLE__SIZE							0x00000002
 #define  NV10TCL_VIEW_MATRIX_ENABLE							0x000003e8
@@ -2919,38 +2939,14 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV10TCL_TX0_MATRIX__SIZE							0x00000010
 #define  NV10TCL_TX1_MATRIX(x)								(0x00000580+((x)*4))
 #define  NV10TCL_TX1_MATRIX__SIZE							0x00000010
-#define  NV10TCL_TX_GEN_COEFF_S_A(x)							(0x00000600+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_S_A__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_S_B(x)							(0x00000604+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_S_B__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_S_C(x)							(0x00000608+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_S_C__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_S_D(x)							(0x0000060c+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_S_D__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_T_A(x)							(0x00000610+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_T_A__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_T_B(x)							(0x00000614+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_T_B__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_T_C(x)							(0x00000618+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_T_C__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_T_D(x)							(0x0000061c+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_T_D__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_R_A(x)							(0x00000620+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_R_A__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_R_B(x)							(0x00000624+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_R_B__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_R_C(x)							(0x00000628+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_R_C__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_R_D(x)							(0x0000062c+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_R_D__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_Q_A(x)							(0x00000630+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_Q_A__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_Q_B(x)							(0x00000634+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_Q_B__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_Q_C(x)							(0x00000638+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_Q_C__SIZE							0x00000002
-#define  NV10TCL_TX_GEN_COEFF_Q_D(x)							(0x0000063c+((x)*64))
-#define  NV10TCL_TX_GEN_COEFF_Q_D__SIZE							0x00000002
+#define  NV10TCL_CLIP_PLANE_A(x)							(0x00000600+((x)*16))
+#define  NV10TCL_CLIP_PLANE_A__SIZE							0x00000008
+#define  NV10TCL_CLIP_PLANE_B(x)							(0x00000604+((x)*16))
+#define  NV10TCL_CLIP_PLANE_B__SIZE							0x00000008
+#define  NV10TCL_CLIP_PLANE_C(x)							(0x00000608+((x)*16))
+#define  NV10TCL_CLIP_PLANE_C__SIZE							0x00000008
+#define  NV10TCL_CLIP_PLANE_D(x)							(0x0000060c+((x)*16))
+#define  NV10TCL_CLIP_PLANE_D__SIZE							0x00000008
 #define  NV10TCL_FOG_EQUATION_CONSTANT							0x00000680
 #define  NV10TCL_FOG_EQUATION_LINEAR							0x00000684
 #define  NV10TCL_FOG_EQUATION_QUADRATIC							0x00000688
@@ -3126,6 +3122,70 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV10TCL_VTXFMT_STRIDE_SHIFT							8
 #define   NV10TCL_VTXFMT_STRIDE_MASK							0x0000ff00
 #define   NV10TCL_VTXFMT_POS_HOMOGENEOUS						(1 << 24)
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_POS						0x00000d00
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_POS						0x00000d04
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_POS_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_POS_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_POS_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_POS_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_POS_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_POS_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_COL						0x00000d08
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_COL						0x00000d0c
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_COL2						0x00000d10
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_COL2						0x00000d14
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL2_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL2_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL2_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL2_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL2_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_COL2_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_TX0						0x00000d18
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_TX0						0x00000d1c
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX0_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX0_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX0_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX0_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX0_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX0_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_TX1						0x00000d20
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_TX1						0x00000d24
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX1_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX1_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX1_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX1_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX1_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_TX1_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_NOR						0x00000d28
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_NOR						0x00000d2c
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_NOR_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_NOR_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_NOR_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_NOR_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_NOR_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_NOR_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_WGH						0x00000d30
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_WGH						0x00000d34
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_WGH_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_WGH_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_WGH_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_WGH_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_WGH_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_WGH_STRIDE_MASK					0x0000ff00
+#define  NV10TCL_VERTEX_ARRAY_OFFSET_FOG						0x00000d38
+#define  NV10TCL_VERTEX_ARRAY_FORMAT_FOG						0x00000d3c
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_FOG_TYPE_SHIFT					0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_FOG_TYPE_MASK					0x0000000f
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_FOG_FIELDS_SHIFT					4
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_FOG_FIELDS_MASK					0x000000f0
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_FOG_STRIDE_SHIFT					8
+#define   NV10TCL_VERTEX_ARRAY_FORMAT_FOG_STRIDE_MASK					0x0000ff00
 #define  NV10TCL_VERTEX_BEGIN_END							0x00000dfc
 #define   NV10TCL_VERTEX_BEGIN_END_STOP							0x00000000
 #define   NV10TCL_VERTEX_BEGIN_END_POINTS						0x00000001
@@ -3965,38 +4025,38 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV20TCL_ENABLED_LIGHTS_7_NONPOSITIONAL					0x00004000
 #define    NV20TCL_ENABLED_LIGHTS_7_POSITIONAL						0x00008000
 #define    NV20TCL_ENABLED_LIGHTS_7_DIRECTIONAL						0x0000c000
-#define  NV20TCL_TX_GEN_MODE_S(x)							(0x000003c0+((x)*16))
-#define  NV20TCL_TX_GEN_MODE_S__SIZE							0x00000004
-#define   NV20TCL_TX_GEN_MODE_S_FALSE							0x00000000
-#define   NV20TCL_TX_GEN_MODE_S_EYE_LINEAR						0x00002400
-#define   NV20TCL_TX_GEN_MODE_S_OBJECT_LINEAR						0x00002401
-#define   NV20TCL_TX_GEN_MODE_S_SPHERE_MAP						0x00002402
-#define   NV20TCL_TX_GEN_MODE_S_NORMAL_MAP						0x00008511
-#define   NV20TCL_TX_GEN_MODE_S_REFLECTION_MAP						0x00008512
-#define  NV20TCL_TX_GEN_MODE_T(x)							(0x000003c4+((x)*16))
-#define  NV20TCL_TX_GEN_MODE_T__SIZE							0x00000004
-#define   NV20TCL_TX_GEN_MODE_T_FALSE							0x00000000
-#define   NV20TCL_TX_GEN_MODE_T_EYE_LINEAR						0x00002400
-#define   NV20TCL_TX_GEN_MODE_T_OBJECT_LINEAR						0x00002401
-#define   NV20TCL_TX_GEN_MODE_T_SPHERE_MAP						0x00002402
-#define   NV20TCL_TX_GEN_MODE_T_NORMAL_MAP						0x00008511
-#define   NV20TCL_TX_GEN_MODE_T_REFLECTION_MAP						0x00008512
-#define  NV20TCL_TX_GEN_MODE_R(x)							(0x000003c8+((x)*16))
-#define  NV20TCL_TX_GEN_MODE_R__SIZE							0x00000004
-#define   NV20TCL_TX_GEN_MODE_R_FALSE							0x00000000
-#define   NV20TCL_TX_GEN_MODE_R_EYE_LINEAR						0x00002400
-#define   NV20TCL_TX_GEN_MODE_R_OBJECT_LINEAR						0x00002401
-#define   NV20TCL_TX_GEN_MODE_R_SPHERE_MAP						0x00002402
-#define   NV20TCL_TX_GEN_MODE_R_NORMAL_MAP						0x00008511
-#define   NV20TCL_TX_GEN_MODE_R_REFLECTION_MAP						0x00008512
-#define  NV20TCL_TX_GEN_MODE_Q(x)							(0x000003cc+((x)*16))
-#define  NV20TCL_TX_GEN_MODE_Q__SIZE							0x00000004
-#define   NV20TCL_TX_GEN_MODE_Q_FALSE							0x00000000
-#define   NV20TCL_TX_GEN_MODE_Q_EYE_LINEAR						0x00002400
-#define   NV20TCL_TX_GEN_MODE_Q_OBJECT_LINEAR						0x00002401
-#define   NV20TCL_TX_GEN_MODE_Q_SPHERE_MAP						0x00002402
-#define   NV20TCL_TX_GEN_MODE_Q_NORMAL_MAP						0x00008511
-#define   NV20TCL_TX_GEN_MODE_Q_REFLECTION_MAP						0x00008512
+#define  NV20TCL_TX_GEN_S(x)								(0x000003c0+((x)*16))
+#define  NV20TCL_TX_GEN_S__SIZE								0x00000004
+#define   NV20TCL_TX_GEN_S_FALSE							0x00000000
+#define   NV20TCL_TX_GEN_S_EYE_LINEAR							0x00002400
+#define   NV20TCL_TX_GEN_S_OBJECT_LINEAR						0x00002401
+#define   NV20TCL_TX_GEN_S_SPHERE_MAP							0x00002402
+#define   NV20TCL_TX_GEN_S_NORMAL_MAP							0x00008511
+#define   NV20TCL_TX_GEN_S_REFLECTION_MAP						0x00008512
+#define  NV20TCL_TX_GEN_T(x)								(0x000003c4+((x)*16))
+#define  NV20TCL_TX_GEN_T__SIZE								0x00000004
+#define   NV20TCL_TX_GEN_T_FALSE							0x00000000
+#define   NV20TCL_TX_GEN_T_EYE_LINEAR							0x00002400
+#define   NV20TCL_TX_GEN_T_OBJECT_LINEAR						0x00002401
+#define   NV20TCL_TX_GEN_T_SPHERE_MAP							0x00002402
+#define   NV20TCL_TX_GEN_T_NORMAL_MAP							0x00008511
+#define   NV20TCL_TX_GEN_T_REFLECTION_MAP						0x00008512
+#define  NV20TCL_TX_GEN_R(x)								(0x000003c8+((x)*16))
+#define  NV20TCL_TX_GEN_R__SIZE								0x00000004
+#define   NV20TCL_TX_GEN_R_FALSE							0x00000000
+#define   NV20TCL_TX_GEN_R_EYE_LINEAR							0x00002400
+#define   NV20TCL_TX_GEN_R_OBJECT_LINEAR						0x00002401
+#define   NV20TCL_TX_GEN_R_SPHERE_MAP							0x00002402
+#define   NV20TCL_TX_GEN_R_NORMAL_MAP							0x00008511
+#define   NV20TCL_TX_GEN_R_REFLECTION_MAP						0x00008512
+#define  NV20TCL_TX_GEN_Q(x)								(0x000003cc+((x)*16))
+#define  NV20TCL_TX_GEN_Q__SIZE								0x00000004
+#define   NV20TCL_TX_GEN_Q_FALSE							0x00000000
+#define   NV20TCL_TX_GEN_Q_EYE_LINEAR							0x00002400
+#define   NV20TCL_TX_GEN_Q_OBJECT_LINEAR						0x00002401
+#define   NV20TCL_TX_GEN_Q_SPHERE_MAP							0x00002402
+#define   NV20TCL_TX_GEN_Q_NORMAL_MAP							0x00008511
+#define   NV20TCL_TX_GEN_Q_REFLECTION_MAP						0x00008512
 #define  NV20TCL_TX_MATRIX_ENABLE(x)							(0x00000420+((x)*4))
 #define  NV20TCL_TX_MATRIX_ENABLE__SIZE							0x00000004
 #define  NV20TCL_POINT_SIZE								0x0000043c
@@ -4026,38 +4086,38 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV20TCL_TX2_MATRIX__SIZE							0x00000010
 #define  NV20TCL_TX3_MATRIX(x)								(0x00000780+((x)*4))
 #define  NV20TCL_TX3_MATRIX__SIZE							0x00000010
-#define  NV20TCL_TX_GEN_COEFF_S_A(x)							(0x00000840+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_S_A__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_S_B(x)							(0x00000844+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_S_B__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_S_C(x)							(0x00000848+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_S_C__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_S_D(x)							(0x0000084c+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_S_D__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_T_A(x)							(0x00000850+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_T_A__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_T_B(x)							(0x00000854+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_T_B__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_T_C(x)							(0x00000858+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_T_C__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_T_D(x)							(0x0000085c+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_T_D__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_R_A(x)							(0x00000860+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_R_A__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_R_B(x)							(0x00000864+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_R_B__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_R_C(x)							(0x00000868+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_R_C__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_R_D(x)							(0x0000086c+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_R_D__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_Q_A(x)							(0x00000870+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_Q_A__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_Q_B(x)							(0x00000874+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_Q_B__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_Q_C(x)							(0x00000878+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_Q_C__SIZE							0x00000004
-#define  NV20TCL_TX_GEN_COEFF_Q_D(x)							(0x0000087c+((x)*64))
-#define  NV20TCL_TX_GEN_COEFF_Q_D__SIZE							0x00000004
+#define  NV20TCL_TX0_CLIP_PLANE_A(x)							(0x00000840+((x)*16))
+#define  NV20TCL_TX0_CLIP_PLANE_A__SIZE							0x00000004
+#define  NV20TCL_TX0_CLIP_PLANE_B(x)							(0x00000844+((x)*16))
+#define  NV20TCL_TX0_CLIP_PLANE_B__SIZE							0x00000004
+#define  NV20TCL_TX0_CLIP_PLANE_C(x)							(0x00000848+((x)*16))
+#define  NV20TCL_TX0_CLIP_PLANE_C__SIZE							0x00000004
+#define  NV20TCL_TX0_CLIP_PLANE_D(x)							(0x0000084c+((x)*16))
+#define  NV20TCL_TX0_CLIP_PLANE_D__SIZE							0x00000004
+#define  NV20TCL_TX1_CLIP_PLANE_A(x)							(0x00000880+((x)*16))
+#define  NV20TCL_TX1_CLIP_PLANE_A__SIZE							0x00000004
+#define  NV20TCL_TX1_CLIP_PLANE_B(x)							(0x00000884+((x)*16))
+#define  NV20TCL_TX1_CLIP_PLANE_B__SIZE							0x00000004
+#define  NV20TCL_TX1_CLIP_PLANE_C(x)							(0x00000888+((x)*16))
+#define  NV20TCL_TX1_CLIP_PLANE_C__SIZE							0x00000004
+#define  NV20TCL_TX1_CLIP_PLANE_D(x)							(0x0000088c+((x)*16))
+#define  NV20TCL_TX1_CLIP_PLANE_D__SIZE							0x00000004
+#define  NV20TCL_TX2_CLIP_PLANE_A(x)							(0x000008c0+((x)*16))
+#define  NV20TCL_TX2_CLIP_PLANE_A__SIZE							0x00000004
+#define  NV20TCL_TX2_CLIP_PLANE_B(x)							(0x000008c4+((x)*16))
+#define  NV20TCL_TX2_CLIP_PLANE_B__SIZE							0x00000004
+#define  NV20TCL_TX2_CLIP_PLANE_C(x)							(0x000008c8+((x)*16))
+#define  NV20TCL_TX2_CLIP_PLANE_C__SIZE							0x00000004
+#define  NV20TCL_TX2_CLIP_PLANE_D(x)							(0x000008cc+((x)*16))
+#define  NV20TCL_TX2_CLIP_PLANE_D__SIZE							0x00000004
+#define  NV20TCL_TX3_CLIP_PLANE_A(x)							(0x00000900+((x)*16))
+#define  NV20TCL_TX3_CLIP_PLANE_A__SIZE							0x00000004
+#define  NV20TCL_TX3_CLIP_PLANE_B(x)							(0x00000904+((x)*16))
+#define  NV20TCL_TX3_CLIP_PLANE_B__SIZE							0x00000004
+#define  NV20TCL_TX3_CLIP_PLANE_C(x)							(0x00000908+((x)*16))
+#define  NV20TCL_TX3_CLIP_PLANE_C__SIZE							0x00000004
+#define  NV20TCL_TX3_CLIP_PLANE_D(x)							(0x0000090c+((x)*16))
+#define  NV20TCL_TX3_CLIP_PLANE_D__SIZE							0x00000004
 #define  NV20TCL_FOG_EQUATION_CONSTANT							0x000009c0
 #define  NV20TCL_FOG_EQUATION_LINEAR							0x000009c4
 #define  NV20TCL_FOG_EQUATION_QUADRATIC							0x000009c8
@@ -4286,17 +4346,17 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV20TCL_LIGHT_BACK_AMBIENT_G__SIZE						0x00000008
 #define  NV20TCL_LIGHT_BACK_AMBIENT_B(x)						(0x00000c08+((x)*64))
 #define  NV20TCL_LIGHT_BACK_AMBIENT_B__SIZE						0x00000008
-#define  NV20TCL_LIGHT_BACK_DIFFUSE_R(x)						(0x00000c0c+((x)*64))
+#define  NV20TCL_LIGHT_BACK_DIFFUSE_R(x)						(0x00000c0c+((x)*128))
 #define  NV20TCL_LIGHT_BACK_DIFFUSE_R__SIZE						0x00000008
-#define  NV20TCL_LIGHT_BACK_DIFFUSE_G(x)						(0x00000c10+((x)*64))
+#define  NV20TCL_LIGHT_BACK_DIFFUSE_G(x)						(0x00000c10+((x)*128))
 #define  NV20TCL_LIGHT_BACK_DIFFUSE_G__SIZE						0x00000008
-#define  NV20TCL_LIGHT_BACK_DIFFUSE_B(x)						(0x00000c14+((x)*64))
+#define  NV20TCL_LIGHT_BACK_DIFFUSE_B(x)						(0x00000c14+((x)*128))
 #define  NV20TCL_LIGHT_BACK_DIFFUSE_B__SIZE						0x00000008
-#define  NV20TCL_LIGHT_BACK_SPECULAR_R(x)						(0x00000c18+((x)*64))
+#define  NV20TCL_LIGHT_BACK_SPECULAR_R(x)						(0x00000c18+((x)*128))
 #define  NV20TCL_LIGHT_BACK_SPECULAR_R__SIZE						0x00000008
-#define  NV20TCL_LIGHT_BACK_SPECULAR_G(x)						(0x00000c1c+((x)*64))
+#define  NV20TCL_LIGHT_BACK_SPECULAR_G(x)						(0x00000c1c+((x)*128))
 #define  NV20TCL_LIGHT_BACK_SPECULAR_G__SIZE						0x00000008
-#define  NV20TCL_LIGHT_BACK_SPECULAR_B(x)						(0x00000c20+((x)*64))
+#define  NV20TCL_LIGHT_BACK_SPECULAR_B(x)						(0x00000c20+((x)*128))
 #define  NV20TCL_LIGHT_BACK_SPECULAR_B__SIZE						0x00000008
 #define  NV20TCL_LIGHT_FRONT_AMBIENT_R(x)						(0x00001000+((x)*128))
 #define  NV20TCL_LIGHT_FRONT_AMBIENT_R__SIZE						0x00000008
@@ -4641,6 +4701,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV20TCL_TX_FORMAT_FORMAT_L8							0x00000000
 #define    NV20TCL_TX_FORMAT_FORMAT_A8							0x00000100
 #define    NV20TCL_TX_FORMAT_FORMAT_A1R5G5B5						0x00000200
+#define    NV20TCL_TX_FORMAT_FORMAT_A8_RECT						0x00000300
 #define    NV20TCL_TX_FORMAT_FORMAT_A4R4G4B4						0x00000400
 #define    NV20TCL_TX_FORMAT_FORMAT_R5G6B5						0x00000500
 #define    NV20TCL_TX_FORMAT_FORMAT_A8R8G8B8						0x00000600
@@ -4653,21 +4714,20 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV20TCL_TX_FORMAT_FORMAT_R5G6B5_RECT						0x00001100
 #define    NV20TCL_TX_FORMAT_FORMAT_A8R8G8B8_RECT					0x00001200
 #define    NV20TCL_TX_FORMAT_FORMAT_L8_RECT						0x00001300
-#define    NV20TCL_TX_FORMAT_FORMAT_DSDT8_RECT						0x00001700
 #define    NV20TCL_TX_FORMAT_FORMAT_A8L8						0x00001a00
-#define    NV20TCL_TX_FORMAT_FORMAT_A8_RECT						0x00001b00
+#define    NV20TCL_TX_FORMAT_FORMAT_A8_RECT2						0x00001b00
 #define    NV20TCL_TX_FORMAT_FORMAT_A4R4G4B4_RECT					0x00001d00
 #define    NV20TCL_TX_FORMAT_FORMAT_R8G8B8_RECT						0x00001e00
-#define    NV20TCL_TX_FORMAT_FORMAT_A8L8_RECT						0x00002000
-#define    NV20TCL_TX_FORMAT_FORMAT_DSDT8						0x00002800
+#define    NV20TCL_TX_FORMAT_FORMAT_L8A8_RECT						0x00002000
+#define    NV20TCL_TX_FORMAT_FORMAT_DSDT						0x00002800
+#define    NV20TCL_TX_FORMAT_FORMAT_A16							0x00003200
 #define    NV20TCL_TX_FORMAT_FORMAT_HILO16						0x00003300
+#define    NV20TCL_TX_FORMAT_FORMAT_A16_RECT						0x00003500
 #define    NV20TCL_TX_FORMAT_FORMAT_HILO16_RECT						0x00003600
 #define    NV20TCL_TX_FORMAT_FORMAT_HILO8						0x00004400
 #define    NV20TCL_TX_FORMAT_FORMAT_SIGNED_HILO8					0x00004500
 #define    NV20TCL_TX_FORMAT_FORMAT_HILO8_RECT						0x00004600
 #define    NV20TCL_TX_FORMAT_FORMAT_SIGNED_HILO8_RECT					0x00004700
-#define    NV20TCL_TX_FORMAT_FORMAT_A16							0x00003200
-#define    NV20TCL_TX_FORMAT_FORMAT_A16_RECT						0x00003500
 #define    NV20TCL_TX_FORMAT_FORMAT_FLOAT_RGBA16_NV					0x00004a00
 #define    NV20TCL_TX_FORMAT_FORMAT_FLOAT_RGBA32_NV					0x00004b00
 #define    NV20TCL_TX_FORMAT_FORMAT_FLOAT_R32_NV					0x00004c00
@@ -4714,10 +4774,10 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV20TCL_TX_ENABLE_MIPMAP_MIN_LOD_SHIFT					26
 #define   NV20TCL_TX_ENABLE_MIPMAP_MIN_LOD_MASK						0x3c000000
 #define   NV20TCL_TX_ENABLE_ENABLE							(1 << 30)
-#define  NV20TCL_TX_NPOT_PITCH(x)							(0x00001b10+((x)*64))
-#define  NV20TCL_TX_NPOT_PITCH__SIZE							0x00000004
-#define   NV20TCL_TX_NPOT_PITCH_PITCH_SHIFT						16
-#define   NV20TCL_TX_NPOT_PITCH_PITCH_MASK						0xffff0000
+#define  NV20TCL_TX_SWIZZLE(x)								(0x00001b10+((x)*64))
+#define  NV20TCL_TX_SWIZZLE__SIZE							0x00000004
+#define   NV20TCL_TX_SWIZZLE_RECT_PITCH_SHIFT						16
+#define   NV20TCL_TX_SWIZZLE_RECT_PITCH_MASK						0xffff0000
 #define  NV20TCL_TX_FILTER(x)								(0x00001b14+((x)*64))
 #define  NV20TCL_TX_FILTER__SIZE							0x00000004
 #define   NV20TCL_TX_FILTER_LOD_BIAS_SHIFT						8
@@ -5157,49 +5217,9 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_COLOR_MASK_R_MASK							0x00ff0000
 #define   NV34TCL_COLOR_MASK_A_SHIFT							24
 #define   NV34TCL_COLOR_MASK_A_MASK							0xff000000
-#define  NV34TCL_STENCIL_FRONT_ENABLE							0x00000328
-#define  NV34TCL_STENCIL_FRONT_MASK							0x0000032c
-#define  NV34TCL_STENCIL_FRONT_FUNC_FUNC						0x00000330
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_NEVER						0x00000200
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_LESS						0x00000201
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_EQUAL						0x00000202
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_LEQUAL					0x00000203
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_GREATER					0x00000204
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_NOTEQUAL					0x00000205
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_GEQUAL					0x00000206
-#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_ALWAYS					0x00000207
-#define  NV34TCL_STENCIL_FRONT_FUNC_REF							0x00000334
-#define  NV34TCL_STENCIL_FRONT_FUNC_MASK						0x00000338
-#define  NV34TCL_STENCIL_FRONT_OP_FAIL							0x0000033c
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_ZERO						0x00000000
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_INVERT						0x0000150a
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_KEEP						0x00001e00
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_REPLACE						0x00001e01
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_INCR						0x00001e02
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_DECR						0x00001e03
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_INCR_WRAP					0x00008507
-#define   NV34TCL_STENCIL_FRONT_OP_FAIL_DECR_WRAP					0x00008508
-#define  NV34TCL_STENCIL_FRONT_OP_ZFAIL							0x00000340
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_ZERO						0x00000000
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_INVERT						0x0000150a
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_KEEP						0x00001e00
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_REPLACE					0x00001e01
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_INCR						0x00001e02
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_DECR						0x00001e03
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_INCR_WRAP					0x00008507
-#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_DECR_WRAP					0x00008508
-#define  NV34TCL_STENCIL_FRONT_OP_ZPASS							0x00000344
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_ZERO						0x00000000
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_INVERT						0x0000150a
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_KEEP						0x00001e00
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_REPLACE					0x00001e01
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_INCR						0x00001e02
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_DECR						0x00001e03
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_INCR_WRAP					0x00008507
-#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_DECR_WRAP					0x00008508
-#define  NV34TCL_STENCIL_BACK_ENABLE							0x00000348
-#define  NV34TCL_STENCIL_BACK_MASK							0x0000034c
-#define  NV34TCL_STENCIL_BACK_FUNC_FUNC							0x00000350
+#define  NV34TCL_STENCIL_BACK_ENABLE							0x00000328
+#define  NV34TCL_STENCIL_BACK_MASK							0x0000032c
+#define  NV34TCL_STENCIL_BACK_FUNC_FUNC							0x00000330
 #define   NV34TCL_STENCIL_BACK_FUNC_FUNC_NEVER						0x00000200
 #define   NV34TCL_STENCIL_BACK_FUNC_FUNC_LESS						0x00000201
 #define   NV34TCL_STENCIL_BACK_FUNC_FUNC_EQUAL						0x00000202
@@ -5208,9 +5228,9 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_STENCIL_BACK_FUNC_FUNC_NOTEQUAL					0x00000205
 #define   NV34TCL_STENCIL_BACK_FUNC_FUNC_GEQUAL						0x00000206
 #define   NV34TCL_STENCIL_BACK_FUNC_FUNC_ALWAYS						0x00000207
-#define  NV34TCL_STENCIL_BACK_FUNC_REF							0x00000354
-#define  NV34TCL_STENCIL_BACK_FUNC_MASK							0x00000358
-#define  NV34TCL_STENCIL_BACK_OP_FAIL							0x0000035c
+#define  NV34TCL_STENCIL_BACK_FUNC_REF							0x00000334
+#define  NV34TCL_STENCIL_BACK_FUNC_MASK							0x00000338
+#define  NV34TCL_STENCIL_BACK_OP_FAIL							0x0000033c
 #define   NV34TCL_STENCIL_BACK_OP_FAIL_ZERO						0x00000000
 #define   NV34TCL_STENCIL_BACK_OP_FAIL_INVERT						0x0000150a
 #define   NV34TCL_STENCIL_BACK_OP_FAIL_KEEP						0x00001e00
@@ -5219,7 +5239,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_STENCIL_BACK_OP_FAIL_DECR						0x00001e03
 #define   NV34TCL_STENCIL_BACK_OP_FAIL_INCR_WRAP					0x00008507
 #define   NV34TCL_STENCIL_BACK_OP_FAIL_DECR_WRAP					0x00008508
-#define  NV34TCL_STENCIL_BACK_OP_ZFAIL							0x00000360
+#define  NV34TCL_STENCIL_BACK_OP_ZFAIL							0x00000340
 #define   NV34TCL_STENCIL_BACK_OP_ZFAIL_ZERO						0x00000000
 #define   NV34TCL_STENCIL_BACK_OP_ZFAIL_INVERT						0x0000150a
 #define   NV34TCL_STENCIL_BACK_OP_ZFAIL_KEEP						0x00001e00
@@ -5228,7 +5248,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_STENCIL_BACK_OP_ZFAIL_DECR						0x00001e03
 #define   NV34TCL_STENCIL_BACK_OP_ZFAIL_INCR_WRAP					0x00008507
 #define   NV34TCL_STENCIL_BACK_OP_ZFAIL_DECR_WRAP					0x00008508
-#define  NV34TCL_STENCIL_BACK_OP_ZPASS							0x00000364
+#define  NV34TCL_STENCIL_BACK_OP_ZPASS							0x00000344
 #define   NV34TCL_STENCIL_BACK_OP_ZPASS_ZERO						0x00000000
 #define   NV34TCL_STENCIL_BACK_OP_ZPASS_INVERT						0x0000150a
 #define   NV34TCL_STENCIL_BACK_OP_ZPASS_KEEP						0x00001e00
@@ -5237,6 +5257,46 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_STENCIL_BACK_OP_ZPASS_DECR						0x00001e03
 #define   NV34TCL_STENCIL_BACK_OP_ZPASS_INCR_WRAP					0x00008507
 #define   NV34TCL_STENCIL_BACK_OP_ZPASS_DECR_WRAP					0x00008508
+#define  NV34TCL_STENCIL_FRONT_ENABLE							0x00000348
+#define  NV34TCL_STENCIL_FRONT_MASK							0x0000034c
+#define  NV34TCL_STENCIL_FRONT_FUNC_FUNC						0x00000350
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_NEVER						0x00000200
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_LESS						0x00000201
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_EQUAL						0x00000202
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_LEQUAL					0x00000203
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_GREATER					0x00000204
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_NOTEQUAL					0x00000205
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_GEQUAL					0x00000206
+#define   NV34TCL_STENCIL_FRONT_FUNC_FUNC_ALWAYS					0x00000207
+#define  NV34TCL_STENCIL_FRONT_FUNC_REF							0x00000354
+#define  NV34TCL_STENCIL_FRONT_FUNC_MASK						0x00000358
+#define  NV34TCL_STENCIL_FRONT_OP_FAIL							0x0000035c
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_ZERO						0x00000000
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_INVERT						0x0000150a
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_KEEP						0x00001e00
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_REPLACE						0x00001e01
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_INCR						0x00001e02
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_DECR						0x00001e03
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_INCR_WRAP					0x00008507
+#define   NV34TCL_STENCIL_FRONT_OP_FAIL_DECR_WRAP					0x00008508
+#define  NV34TCL_STENCIL_FRONT_OP_ZFAIL							0x00000360
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_ZERO						0x00000000
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_INVERT						0x0000150a
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_KEEP						0x00001e00
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_REPLACE					0x00001e01
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_INCR						0x00001e02
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_DECR						0x00001e03
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_INCR_WRAP					0x00008507
+#define   NV34TCL_STENCIL_FRONT_OP_ZFAIL_DECR_WRAP					0x00008508
+#define  NV34TCL_STENCIL_FRONT_OP_ZPASS							0x00000364
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_ZERO						0x00000000
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_INVERT						0x0000150a
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_KEEP						0x00001e00
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_REPLACE					0x00001e01
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_INCR						0x00001e02
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_DECR						0x00001e03
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_INCR_WRAP					0x00008507
+#define   NV34TCL_STENCIL_FRONT_OP_ZPASS_DECR_WRAP					0x00008508
 #define  NV34TCL_SHADE_MODEL								0x00000368
 #define   NV34TCL_SHADE_MODEL_FLAT							0x00001d00
 #define   NV34TCL_SHADE_MODEL_SMOOTH							0x00001d01
@@ -6156,6 +6216,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_VP_CLIP_PLANES_ENABLE_PLANE3						(1 << 13)
 #define   NV34TCL_VP_CLIP_PLANES_ENABLE_PLANE4						(1 << 17)
 #define   NV34TCL_VP_CLIP_PLANES_ENABLE_PLANE5						(1 << 21)
+#define   NV34TCL_VP_CLIP_PLANES_ENABLE_PLANE6						(1 << 25)
+#define   NV34TCL_VP_CLIP_PLANES_ENABLE_PLANE7						(1 << 29)
 #define  NV34TCL_POLYGON_STIPPLE_ENABLE							0x0000147c
 #define  NV34TCL_POLYGON_STIPPLE_PATTERN(x)						(0x00001480+((x)*4))
 #define  NV34TCL_POLYGON_STIPPLE_PATTERN__SIZE						0x00000020
@@ -6257,7 +6319,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV34TCL_POLYGON_SMOOTH_ENABLE							0x00001838
 #define  NV34TCL_CULL_FACE_ENABLE							0x0000183c
 #define  NV34TCL_TX_PALETTE_OFFSET(x)							(0x00001840+((x)*4))
-#define  NV34TCL_TX_PALETTE_OFFSET__SIZE						0x00000008
+#define  NV34TCL_TX_PALETTE_OFFSET__SIZE						0x00000004
 #define  NV34TCL_VTX_ATTR_2F_X(x)							(0x00001880+((x)*8))
 #define  NV34TCL_VTX_ATTR_2F_X__SIZE							0x00000010
 #define  NV34TCL_VTX_ATTR_2F_Y(x)							(0x00001884+((x)*8))
@@ -6291,9 +6353,9 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_VTX_ATTR_4I_ZW_W_SHIFT						16
 #define   NV34TCL_VTX_ATTR_4I_ZW_W_MASK							0xffff0000
 #define  NV34TCL_TX_OFFSET(x)								(0x00001a00+((x)*32))
-#define  NV34TCL_TX_OFFSET__SIZE							0x00000008
+#define  NV34TCL_TX_OFFSET__SIZE							0x00000004
 #define  NV34TCL_TX_FORMAT(x)								(0x00001a04+((x)*32))
-#define  NV34TCL_TX_FORMAT__SIZE							0x00000008
+#define  NV34TCL_TX_FORMAT__SIZE							0x00000004
 #define   NV34TCL_TX_FORMAT_DMA0							(1 <<  0)
 #define   NV34TCL_TX_FORMAT_DMA1							(1 <<  1)
 #define   NV34TCL_TX_FORMAT_CUBIC							(1 <<  2)
@@ -6308,6 +6370,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV34TCL_TX_FORMAT_FORMAT_L8							0x00000000
 #define    NV34TCL_TX_FORMAT_FORMAT_A8							0x00000100
 #define    NV34TCL_TX_FORMAT_FORMAT_A1R5G5B5						0x00000200
+#define    NV34TCL_TX_FORMAT_FORMAT_A8_RECT						0x00000300
 #define    NV34TCL_TX_FORMAT_FORMAT_A4R4G4B4						0x00000400
 #define    NV34TCL_TX_FORMAT_FORMAT_R5G6B5						0x00000500
 #define    NV34TCL_TX_FORMAT_FORMAT_A8R8G8B8						0x00000600
@@ -6320,21 +6383,20 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV34TCL_TX_FORMAT_FORMAT_R5G6B5_RECT						0x00001100
 #define    NV34TCL_TX_FORMAT_FORMAT_A8R8G8B8_RECT					0x00001200
 #define    NV34TCL_TX_FORMAT_FORMAT_L8_RECT						0x00001300
-#define    NV34TCL_TX_FORMAT_FORMAT_DSDT8_RECT						0x00001700
 #define    NV34TCL_TX_FORMAT_FORMAT_A8L8						0x00001a00
-#define    NV34TCL_TX_FORMAT_FORMAT_A8_RECT						0x00001b00
+#define    NV34TCL_TX_FORMAT_FORMAT_A8_RECT2						0x00001b00
 #define    NV34TCL_TX_FORMAT_FORMAT_A4R4G4B4_RECT					0x00001d00
 #define    NV34TCL_TX_FORMAT_FORMAT_R8G8B8_RECT						0x00001e00
-#define    NV34TCL_TX_FORMAT_FORMAT_A8L8_RECT						0x00002000
-#define    NV34TCL_TX_FORMAT_FORMAT_DSDT8						0x00002800
+#define    NV34TCL_TX_FORMAT_FORMAT_L8A8_RECT						0x00002000
+#define    NV34TCL_TX_FORMAT_FORMAT_DSDT						0x00002800
+#define    NV34TCL_TX_FORMAT_FORMAT_A16							0x00003200
 #define    NV34TCL_TX_FORMAT_FORMAT_HILO16						0x00003300
+#define    NV34TCL_TX_FORMAT_FORMAT_A16_RECT						0x00003500
 #define    NV34TCL_TX_FORMAT_FORMAT_HILO16_RECT						0x00003600
 #define    NV34TCL_TX_FORMAT_FORMAT_HILO8						0x00004400
 #define    NV34TCL_TX_FORMAT_FORMAT_SIGNED_HILO8					0x00004500
 #define    NV34TCL_TX_FORMAT_FORMAT_HILO8_RECT						0x00004600
 #define    NV34TCL_TX_FORMAT_FORMAT_SIGNED_HILO8_RECT					0x00004700
-#define    NV34TCL_TX_FORMAT_FORMAT_A16							0x00003200
-#define    NV34TCL_TX_FORMAT_FORMAT_A16_RECT						0x00003500
 #define    NV34TCL_TX_FORMAT_FORMAT_FLOAT_RGBA16_NV					0x00004a00
 #define    NV34TCL_TX_FORMAT_FORMAT_FLOAT_RGBA32_NV					0x00004b00
 #define    NV34TCL_TX_FORMAT_FORMAT_FLOAT_R32_NV					0x00004c00
@@ -6346,7 +6408,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_TX_FORMAT_BASE_SIZE_W_SHIFT						28
 #define   NV34TCL_TX_FORMAT_BASE_SIZE_W_MASK						0xf0000000
 #define  NV34TCL_TX_WRAP(x)								(0x00001a08+((x)*32))
-#define  NV34TCL_TX_WRAP__SIZE								0x00000008
+#define  NV34TCL_TX_WRAP__SIZE								0x00000004
 #define   NV34TCL_TX_WRAP_S_SHIFT							0
 #define   NV34TCL_TX_WRAP_S_MASK							0x000000ff
 #define    NV34TCL_TX_WRAP_S_REPEAT							0x00000001
@@ -6381,7 +6443,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV34TCL_TX_WRAP_RCOMP_LEQUAL							0x60000000
 #define    NV34TCL_TX_WRAP_RCOMP_ALWAYS							0x70000000
 #define  NV34TCL_TX_ENABLE(x)								(0x00001a0c+((x)*32))
-#define  NV34TCL_TX_ENABLE__SIZE							0x00000008
+#define  NV34TCL_TX_ENABLE__SIZE							0x00000004
 #define   NV34TCL_TX_ENABLE_ANISO_SHIFT							4
 #define   NV34TCL_TX_ENABLE_ANISO_MASK							0x00000030
 #define    NV34TCL_TX_ENABLE_ANISO_NONE							0x00000000
@@ -6394,7 +6456,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_TX_ENABLE_MIPMAP_MIN_LOD_MASK						0x3c000000
 #define   NV34TCL_TX_ENABLE_ENABLE							(1 << 30)
 #define  NV34TCL_TX_SWIZZLE(x)								(0x00001a10+((x)*32))
-#define  NV34TCL_TX_SWIZZLE__SIZE							0x00000008
+#define  NV34TCL_TX_SWIZZLE__SIZE							0x00000004
 #define   NV34TCL_TX_SWIZZLE_S0_X_SHIFT							14
 #define   NV34TCL_TX_SWIZZLE_S0_X_MASK							0x0000c000
 #define    NV34TCL_TX_SWIZZLE_S0_X_ZERO							0x00000000
@@ -6442,7 +6504,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_TX_SWIZZLE_RECT_PITCH_SHIFT						16
 #define   NV34TCL_TX_SWIZZLE_RECT_PITCH_MASK						0xffff0000
 #define  NV34TCL_TX_FILTER(x)								(0x00001a14+((x)*32))
-#define  NV34TCL_TX_FILTER__SIZE							0x00000008
+#define  NV34TCL_TX_FILTER__SIZE							0x00000004
 #define   NV34TCL_TX_FILTER_LOD_BIAS_SHIFT						8
 #define   NV34TCL_TX_FILTER_LOD_BIAS_MASK						0x00000f00
 #define   NV34TCL_TX_FILTER_MINIFY_SHIFT						16
@@ -6462,13 +6524,13 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV34TCL_TX_FILTER_SIGNED_RED							(1 << 30)
 #define   NV34TCL_TX_FILTER_SIGNED_ALPHA						(1 << 31)
 #define  NV34TCL_TX_NPOT_SIZE(x)							(0x00001a18+((x)*32))
-#define  NV34TCL_TX_NPOT_SIZE__SIZE							0x00000008
+#define  NV34TCL_TX_NPOT_SIZE__SIZE							0x00000004
 #define   NV34TCL_TX_NPOT_SIZE_H_SHIFT							0
 #define   NV34TCL_TX_NPOT_SIZE_H_MASK							0x0000ffff
 #define   NV34TCL_TX_NPOT_SIZE_W_SHIFT							16
 #define   NV34TCL_TX_NPOT_SIZE_W_MASK							0xffff0000
 #define  NV34TCL_TX_BORDER_COLOR(x)							(0x00001a1c+((x)*32))
-#define  NV34TCL_TX_BORDER_COLOR__SIZE							0x00000008
+#define  NV34TCL_TX_BORDER_COLOR__SIZE							0x00000004
 #define   NV34TCL_TX_BORDER_COLOR_B_SHIFT						0
 #define   NV34TCL_TX_BORDER_COLOR_B_MASK						0x000000ff
 #define   NV34TCL_TX_BORDER_COLOR_G_SHIFT						8
@@ -6543,14 +6605,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define    NV34TCL_POINT_SPRITE_R_MODE_ZERO						0x00000000
 #define    NV34TCL_POINT_SPRITE_R_MODE_R						0x00000002
 #define    NV34TCL_POINT_SPRITE_R_MODE_S						0x00000004
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_0						(1 <<  8)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_1						(1 <<  9)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_2						(1 << 10)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_3						(1 << 11)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_4						(1 << 12)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_5						(1 << 13)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_6						(1 << 14)
-#define   NV34TCL_POINT_SPRITE_COORD_REPLACE_7						(1 << 15)
+#define   NV34TCL_POINT_SPRITE_COORD_REPLACE						(1 << 11)
 #define  NV34TCL_VP_UPLOAD_CONST_ID							0x00001efc
 #define  NV34TCL_VP_UPLOAD_CONST_X(x)							(0x00001f00+((x)*16))
 #define  NV34TCL_VP_UPLOAD_CONST_X__SIZE						0x00000004
@@ -7297,14 +7352,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV40TCL_MULTISAMPLE_CONTROL							0x00001d7c
 #define  NV40TCL_CLEAR_VALUE_DEPTH							0x00001d8c
 #define  NV40TCL_CLEAR_VALUE_COLOR							0x00001d90
-#define   NV40TCL_CLEAR_VALUE_COLOR_B_SHIFT						0
-#define   NV40TCL_CLEAR_VALUE_COLOR_B_MASK						0x000000ff
-#define   NV40TCL_CLEAR_VALUE_COLOR_G_SHIFT						8
-#define   NV40TCL_CLEAR_VALUE_COLOR_G_MASK						0x0000ff00
-#define   NV40TCL_CLEAR_VALUE_COLOR_R_SHIFT						16
-#define   NV40TCL_CLEAR_VALUE_COLOR_R_MASK						0x00ff0000
-#define   NV40TCL_CLEAR_VALUE_COLOR_A_SHIFT						24
-#define   NV40TCL_CLEAR_VALUE_COLOR_A_MASK						0xff000000
 #define  NV40TCL_CLEAR_BUFFERS								0x00001d94
 #define   NV40TCL_CLEAR_BUFFERS_COLOR_A							(1 <<  7)
 #define   NV40TCL_CLEAR_BUFFERS_COLOR_B							(1 <<  6)
@@ -7324,20 +7371,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV40TCL_VP_START_FROM_ID							0x00001ea0
 #define  NV40TCL_POINT_SIZE								0x00001ee0
 #define  NV40TCL_POINT_SPRITE								0x00001ee8
-#define   NV40TCL_POINT_SPRITE_ENABLE							(1 <<  0)
-#define   NV40TCL_POINT_SPRITE_R_MODE_SHIFT						1
-#define   NV40TCL_POINT_SPRITE_R_MODE_MASK						0x00000006
-#define    NV40TCL_POINT_SPRITE_R_MODE_ZERO						0x00000000
-#define    NV40TCL_POINT_SPRITE_R_MODE_R						0x00000002
-#define    NV40TCL_POINT_SPRITE_R_MODE_S						0x00000004
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_0						(1 <<  8)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_1						(1 <<  9)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_2						(1 << 10)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_3						(1 << 11)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_4						(1 << 12)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_5						(1 << 13)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_6						(1 << 14)
-#define   NV40TCL_POINT_SPRITE_COORD_REPLACE_7						(1 << 15)
 #define  NV40TCL_VP_UPLOAD_CONST_ID							0x00001efc
 #define  NV40TCL_VP_UPLOAD_CONST_X(x)							(0x00001f00+((x)*16))
 #define  NV40TCL_VP_UPLOAD_CONST_X__SIZE						0x00000004
@@ -7924,7 +7957,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV50TCL_CLEAR_DEPTH								0x00000d90
 #define  NV50TCL_STACK_ADDRESS_HIGH							0x00000d94
 #define  NV50TCL_STACK_ADDRESS_LOW							0x00000d98
-#define  NV50TCL_STACK_SIZE_LOG								0x00000d9c
 #define  NV50TCL_CLEAR_STENCIL								0x00000da0
 #define  NV50TCL_STRMOUT_PRIMITIVE_COUNT						0x00000da8
 #define  NV50TCL_POLYGON_MODE_FRONT							0x00000dac
@@ -7963,10 +7995,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV50TCL_CB_ADDR_BUFFER_MASK							0x0000007f
 #define  NV50TCL_CB_DATA(x)								(0x00000f04+((x)*4))
 #define  NV50TCL_CB_DATA__SIZE								0x00000010
-#define  NV50TCL_LOCAL_WARPS_LOG_ALLOC							0x00000f44
-#define  NV50TCL_LOCAL_WARPS_NO_CLAMP							0x00000f48
-#define  NV50TCL_STACK_WARPS_LOG_ALLOC							0x00000f4c
-#define  NV50TCL_STACK_WARPS_NO_CLAMP							0x00000f50
 #define  NV50TCL_STENCIL_BACK_FUNC_REF							0x00000f54
 #define  NV50TCL_STENCIL_BACK_MASK							0x00000f58
 #define  NV50TCL_STENCIL_BACK_FUNC_MASK							0x00000f5c
@@ -8059,8 +8087,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV50TCL_SHADE_MODEL								0x000012d4
 #define   NV50TCL_SHADE_MODEL_FLAT							0x00001d00
 #define   NV50TCL_SHADE_MODEL_SMOOTH							0x00001d01
-#define  NV50TCL_LOCAL_ADDRESS_HIGH							0x000012d8
-#define  NV50TCL_LOCAL_ADDRESS_LOW							0x000012dc
+#define  NV50TCL_LOCAL_BASE_HIGH							0x000012d8
+#define  NV50TCL_LOCAL_BASE_LOW								0x000012dc
 #define  NV50TCL_LOCAL_SIZE_LOG								0x000012e0
 #define  NV50TCL_DEPTH_WRITE_ENABLE							0x000012e8
 #define  NV50TCL_ALPHA_TEST_ENABLE							0x000012ec
@@ -8752,7 +8780,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV50TCL_CULL_FACE_FRONT_AND_BACK						0x00000408
 #define  NV50TCL_VIEWPORT_TRANSFORM_EN							0x0000192c
 #define  NV50TCL_VIEW_VOLUME_CLIP_CTRL							0x0000193c
-#define  NV50TCL_VIEWPORT_CLIP_RECTS_EN							0x0000194c
 #define  NV50TCL_FP_CTRL_UNK196C							0x0000196c
 #define  NV50TCL_FP_INTERPOLANT_CTRL							0x00001988
 #define   NV50TCL_FP_INTERPOLANT_CTRL_UMASK_SHIFT					24
@@ -8898,7 +8925,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV50_COMPUTE_CP_ADDRESS_LOW							0x00000214
 #define  NV50_COMPUTE_STACK_ADDRESS_HIGH						0x00000218
 #define  NV50_COMPUTE_STACK_ADDRESS_LOW							0x0000021c
-#define  NV50_COMPUTE_STACK_SIZE_LOG							0x00000220
 #define  NV50_COMPUTE_TSC_ADDRESS_HIGH							0x0000022c
 #define  NV50_COMPUTE_TSC_ADDRESS_LOW							0x00000230
 #define  NV50_COMPUTE_TSC_LIMIT								0x00000234
@@ -8912,8 +8938,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define  NV50_COMPUTE_DELAY1								0x00000284
 #define  NV50_COMPUTE_WATCHDOG_TIMER							0x00000288
 #define  NV50_COMPUTE_DELAY2								0x0000028c
-#define  NV50_COMPUTE_LOCAL_ADDRESS_HIGH						0x00000294
-#define  NV50_COMPUTE_LOCAL_ADDRESS_LOW							0x00000298
+#define  NV50_COMPUTE_LOCAL_BASE_HIGH							0x00000294
+#define  NV50_COMPUTE_LOCAL_BASE_LOW							0x00000298
 #define  NV50_COMPUTE_LOCAL_SIZE_LOG							0x0000029c
 #define  NV50_COMPUTE_CB_DEF_ADDRESS_HIGH						0x000002a4
 #define  NV50_COMPUTE_CB_DEF_ADDRESS_LOW						0x000002a8
@@ -8940,10 +8966,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV50_COMPUTE_PM_CONTROL_UNK1_MASK						0x00000070
 #define   NV50_COMPUTE_PM_CONTROL_UNK2_SHIFT						8
 #define   NV50_COMPUTE_PM_CONTROL_UNK2_MASK						0xffffff00
-#define  NV50_COMPUTE_LOCAL_WARPS_LOG_ALLOC						0x000002fc
-#define  NV50_COMPUTE_LOCAL_WARPS_NO_CLAMP						0x00000300
-#define  NV50_COMPUTE_STACK_WARPS_LOG_ALLOC						0x00000304
-#define  NV50_COMPUTE_STACK_WARPS_NO_CLAMP						0x00000308
 #define  NV50_COMPUTE_QUERY_ADDRESS_HIGH						0x00000310
 #define  NV50_COMPUTE_QUERY_ADDRESS_LOW							0x00000314
 #define  NV50_COMPUTE_QUERY_COUNTER							0x00000318
@@ -8999,10 +9021,10 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define   NV50_COMPUTE_SET_PROGRAM_CB_BUFFER_SHIFT					12
 #define   NV50_COMPUTE_SET_PROGRAM_CB_BUFFER_MASK					0x0007f000
 #define   NV50_COMPUTE_SET_PROGRAM_CB_VALID						(1 <<  0)
-#define  NV50_COMPUTE_GLOBAL_ADDRESS_HIGH(x)						(0x00000400+((x)*32))
-#define  NV50_COMPUTE_GLOBAL_ADDRESS_HIGH__SIZE						0x00000010
-#define  NV50_COMPUTE_GLOBAL_ADDRESS_LOW(x)						(0x00000404+((x)*32))
-#define  NV50_COMPUTE_GLOBAL_ADDRESS_LOW__SIZE						0x00000010
+#define  NV50_COMPUTE_GLOBAL_BASE_HIGH(x)						(0x00000400+((x)*32))
+#define  NV50_COMPUTE_GLOBAL_BASE_HIGH__SIZE						0x00000010
+#define  NV50_COMPUTE_GLOBAL_BASE_LOW(x)						(0x00000404+((x)*32))
+#define  NV50_COMPUTE_GLOBAL_BASE_LOW__SIZE						0x00000010
 #define  NV50_COMPUTE_GLOBAL_PITCH(x)							(0x00000408+((x)*32))
 #define  NV50_COMPUTE_GLOBAL_PITCH__SIZE						0x00000010
 #define  NV50_COMPUTE_GLOBAL_LIMIT(x)							(0x0000040c+((x)*32))
diff --git a/nouveau/nouveau_device.c b/nouveau/nouveau_device.c
index c525391..0982d3b 100644
--- a/nouveau/nouveau_device.c
+++ b/nouveau/nouveau_device.c
@@ -26,7 +26,7 @@
 
 #include "nouveau_private.h"
 
-#if NOUVEAU_DRM_HEADER_PATCHLEVEL != 16
+#if NOUVEAU_DRM_HEADER_PATCHLEVEL != 15
 #error nouveau_drm.h does not match expected patchlevel, update libdrm.
 #endif
 
@@ -54,6 +54,12 @@ nouveau_device_open_existing(struct nouveau_device **dev, int close,
 	nvdev->ctx = ctx;
 	nvdev->needs_close = close;
 
+	ret = drmCommandNone(nvdev->fd, DRM_NOUVEAU_CARD_INIT);
+	if (ret) {
+		nouveau_device_close((void *)&nvdev);
+		return ret;
+	}
+
 	ret = nouveau_device_get_param(&nvdev->base,
 				       NOUVEAU_GETPARAM_VM_VRAM_BASE, &value);
 	if (ret) {
diff --git a/nouveau/nouveau_private.h b/nouveau/nouveau_private.h
index 5a952f7..39758d1 100644
--- a/nouveau/nouveau_private.h
+++ b/nouveau/nouveau_private.h
@@ -35,11 +35,14 @@
 #include "nouveau_bo.h"
 #include "nouveau_resource.h"
 #include "nouveau_pushbuf.h"
-#include "nouveau_reloc.h"
 
 #define CALPB_BUFFERS 4
 #define CALPB_BUFSZ   16384
 struct nouveau_pushbuf_priv {
+	struct nouveau_pushbuf base;
+
+	int no_aper_update;
+	int use_cal;
 	uint32_t cal_suffix0;
 	uint32_t cal_suffix1;
 	struct nouveau_bo *buffer[CALPB_BUFFERS];
@@ -47,19 +50,15 @@ struct nouveau_pushbuf_priv {
 	int current_offset;
 
 	unsigned *pushbuf;
-	unsigned size;
+	unsigned  size;
 
-	uint32_t *marker;
-	unsigned marker_offset;
+	unsigned marker;
 	unsigned marker_relocs;
-	unsigned marker_push;
 
 	struct drm_nouveau_gem_pushbuf_bo *buffers;
 	unsigned nr_buffers;
 	struct drm_nouveau_gem_pushbuf_reloc *relocs;
 	unsigned nr_relocs;
-	struct drm_nouveau_gem_pushbuf_push push[NOUVEAU_GEM_MAX_PUSH];
-	unsigned nr_push;
 };
 #define nouveau_pushbuf(n) ((struct nouveau_pushbuf_priv *)(n))
 
@@ -118,6 +117,7 @@ struct nouveau_bo_priv {
 	void *map;
 
 	/* Last known information from kernel on buffer status */
+	int pinned;
 	uint64_t offset;
 	uint32_t domain;
 };
diff --git a/nouveau/nouveau_pushbuf.c b/nouveau/nouveau_pushbuf.c
index 28b8018..7da3a47 100644
--- a/nouveau/nouveau_pushbuf.c
+++ b/nouveau/nouveau_pushbuf.c
@@ -31,7 +31,7 @@
 #define PB_MIN_USER_DWORDS  2048
 
 static int
-nouveau_pushbuf_space(struct nouveau_channel *chan, unsigned min)
+nouveau_pushbuf_space_call(struct nouveau_channel *chan, unsigned min)
 {
 	struct nouveau_channel_priv *nvchan = nouveau_channel(chan);
 	struct nouveau_pushbuf_priv *nvpb = &nvchan->pb;
@@ -41,8 +41,8 @@ nouveau_pushbuf_space(struct nouveau_channel *chan, unsigned min)
 	if (min < PB_MIN_USER_DWORDS)
 		min = PB_MIN_USER_DWORDS;
 
-	nvpb->current_offset = chan->cur - nvpb->pushbuf;
-	if (chan->cur + min + 2 <= chan->end)
+	nvpb->current_offset = nvpb->base.cur - nvpb->pushbuf;
+	if (nvpb->current_offset + min + 2 <= nvpb->size)
 		return 0;
 
 	nvpb->current++;
@@ -58,13 +58,38 @@ nouveau_pushbuf_space(struct nouveau_channel *chan, unsigned min)
 	nvpb->pushbuf = bo->map;
 	nvpb->current_offset = 0;
 
-	chan->cur = nvpb->pushbuf;
-	chan->end = nvpb->pushbuf + nvpb->size;
+	nvpb->base.channel = chan;
+	nvpb->base.remaining = nvpb->size;
+	nvpb->base.cur = nvpb->pushbuf;
 
 	nouveau_bo_unmap(bo);
 	return 0;
 }
 
+static int
+nouveau_pushbuf_space(struct nouveau_channel *chan, unsigned min)
+{
+	struct nouveau_channel_priv *nvchan = nouveau_channel(chan);
+	struct nouveau_pushbuf_priv *nvpb = &nvchan->pb;
+
+	if (nvpb->use_cal)
+		return nouveau_pushbuf_space_call(chan, min);
+
+	if (nvpb->pushbuf) {
+		free(nvpb->pushbuf);
+		nvpb->pushbuf = NULL;
+	}
+
+	nvpb->size = min < PB_MIN_USER_DWORDS ? PB_MIN_USER_DWORDS : min;
+	nvpb->pushbuf = malloc(sizeof(uint32_t) * nvpb->size);
+
+	nvpb->base.channel = chan;
+	nvpb->base.remaining = nvpb->size;
+	nvpb->base.cur = nvpb->pushbuf;
+
+	return 0;
+}
+
 static void
 nouveau_pushbuf_fini_call(struct nouveau_channel *chan)
 {
@@ -74,43 +99,46 @@ nouveau_pushbuf_fini_call(struct nouveau_channel *chan)
 
 	for (i = 0; i < CALPB_BUFFERS; i++)
 		nouveau_bo_ref(NULL, &nvpb->buffer[i]);
+	nvpb->use_cal = 0;
 	nvpb->pushbuf = NULL;
 }
 
-static int
+static void
 nouveau_pushbuf_init_call(struct nouveau_channel *chan)
 {
-	struct drm_nouveau_gem_pushbuf req;
+	struct drm_nouveau_gem_pushbuf_call req;
 	struct nouveau_channel_priv *nvchan = nouveau_channel(chan);
 	struct nouveau_pushbuf_priv *nvpb = &nvchan->pb;
 	struct nouveau_device *dev = chan->device;
-	uint32_t flags = 0;
 	int i, ret;
 
-	if (nvchan->drm.pushbuf_domains & NOUVEAU_GEM_DOMAIN_GART)
-		flags |= NOUVEAU_BO_GART;
-	else
-		flags |= NOUVEAU_BO_VRAM;
-
 	req.channel = chan->id;
-	req.nr_push = 0;
+	req.handle = 0;
 	ret = drmCommandWriteRead(nouveau_device(dev)->fd,
-				  DRM_NOUVEAU_GEM_PUSHBUF, &req, sizeof(req));
-	if (ret)
-		return ret;
+				  DRM_NOUVEAU_GEM_PUSHBUF_CALL2,
+				  &req, sizeof(req));
+	if (ret) {
+		ret = drmCommandWriteRead(nouveau_device(dev)->fd,
+					  DRM_NOUVEAU_GEM_PUSHBUF_CALL2,
+					  &req, sizeof(req));
+		if (ret)
+			return;
+
+		nvpb->no_aper_update = 1;
+	}
 
 	for (i = 0; i < CALPB_BUFFERS; i++) {
-		ret = nouveau_bo_new(dev, flags | NOUVEAU_BO_MAP,
+		ret = nouveau_bo_new(dev, NOUVEAU_BO_GART | NOUVEAU_BO_MAP,
 				     0, CALPB_BUFSZ, &nvpb->buffer[i]);
 		if (ret) {
 			nouveau_pushbuf_fini_call(chan);
-			return ret;
+			return;
 		}
 	}
 
+	nvpb->use_cal = 1;
 	nvpb->cal_suffix0 = req.suffix0;
 	nvpb->cal_suffix1 = req.suffix1;
-	return 0;
 }
 
 int
@@ -120,18 +148,25 @@ nouveau_pushbuf_init(struct nouveau_channel *chan)
 	struct nouveau_pushbuf_priv *nvpb = &nvchan->pb;
 	int ret;
 
-	ret = nouveau_pushbuf_init_call(chan);
-	if (ret)
-		return ret;
+	nouveau_pushbuf_init_call(chan);
 
 	ret = nouveau_pushbuf_space(chan, 0);
-	if (ret)
-		return ret;
+	if (ret) {
+		if (nvpb->use_cal) {
+			nouveau_pushbuf_fini_call(chan);
+			ret = nouveau_pushbuf_space(chan, 0);
+		}
+
+		if (ret)
+			return ret;
+	}
 
 	nvpb->buffers = calloc(NOUVEAU_GEM_MAX_BUFFERS,
 			       sizeof(struct drm_nouveau_gem_pushbuf_bo));
 	nvpb->relocs = calloc(NOUVEAU_GEM_MAX_RELOCS,
 			      sizeof(struct drm_nouveau_gem_pushbuf_reloc));
+
+	chan->pushbuf = &nvpb->base;
 	return 0;
 }
 
@@ -145,129 +180,92 @@ nouveau_pushbuf_fini(struct nouveau_channel *chan)
 	free(nvpb->relocs);
 }
 
-static int
-nouveau_pushbuf_bo_add(struct nouveau_channel *chan, struct nouveau_bo *bo,
-		       unsigned offset, unsigned length)
-{
-	struct nouveau_channel_priv *nvchan = nouveau_channel(chan);
-	struct nouveau_pushbuf_priv *nvpb = &nvchan->pb;
-	struct drm_nouveau_gem_pushbuf_push *p = &nvpb->push[nvpb->nr_push++];
-	struct drm_nouveau_gem_pushbuf_bo *pbbo;
-	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
-
-	pbbo = nouveau_bo_emit_buffer(chan, bo);
-	if (!pbbo)
-		return -ENOMEM;
-	pbbo->valid_domains &= nvchan->drm.pushbuf_domains;
-	pbbo->read_domains |= nvchan->drm.pushbuf_domains;
-	nvbo->pending_refcnt++;
-
-	p->bo_index = pbbo - nvpb->buffers;
-	p->offset = offset;
-	p->length = length;
-	return 0;
-}
-
-int
-nouveau_pushbuf_submit(struct nouveau_channel *chan, struct nouveau_bo *bo,
-		       unsigned offset, unsigned length)
-{
-	struct nouveau_pushbuf_priv *nvpb = &nouveau_channel(chan)->pb;
-	int ret, len;
-
-	if ((AVAIL_RING(chan) + nvpb->current_offset) != nvpb->size) {
-		if (nvpb->cal_suffix0 || nvpb->cal_suffix1) {
-			*(chan->cur++) = nvpb->cal_suffix0;
-			*(chan->cur++) = nvpb->cal_suffix1;
-		}
-
-		len = (chan->cur - nvpb->pushbuf) - nvpb->current_offset;
-
-		ret = nouveau_pushbuf_bo_add(chan, nvpb->buffer[nvpb->current],
-					     nvpb->current_offset * 4, len * 4);
-		if (ret)
-			return ret;
-
-		nvpb->current_offset += len;
-	}
-
-	return bo ? nouveau_pushbuf_bo_add(chan, bo, offset, length) : 0;
-}
-
-static void
-nouveau_pushbuf_bo_unref(struct nouveau_pushbuf_priv *nvpb, int index)
-{
-	struct drm_nouveau_gem_pushbuf_bo *pbbo = &nvpb->buffers[index];
-	struct nouveau_bo *bo = (void *)(unsigned long)pbbo->user_priv;
-	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
-
-	if (--nvbo->pending_refcnt)
-		return;
-
-	if (pbbo->presumed.valid == 0) {
-		nvbo->domain = pbbo->presumed.domain;
-		nvbo->offset = pbbo->presumed.offset;
-	}
-
-	nvbo->pending = NULL;
-	nouveau_bo_ref(NULL, &bo);
-
-	/* we only ever remove from the tail of the pending lists,
-	 * so this is safe.
-	 */
-	nvpb->nr_buffers--;
-}
-
 int
 nouveau_pushbuf_flush(struct nouveau_channel *chan, unsigned min)
 {
 	struct nouveau_device_priv *nvdev = nouveau_device(chan->device);
 	struct nouveau_channel_priv *nvchan = nouveau_channel(chan);
 	struct nouveau_pushbuf_priv *nvpb = &nvchan->pb;
-	struct drm_nouveau_gem_pushbuf req;
 	unsigned i;
 	int ret;
 
-	ret = nouveau_pushbuf_submit(chan, NULL, 0, 0);
-	if (ret)
-		return ret;
-
-	if (!nvpb->nr_push)
+	if (nvpb->base.remaining == nvpb->size)
 		return 0;
 
-	req.channel = chan->id;
-	req.nr_push = nvpb->nr_push;
-	req.push = (uint64_t)(unsigned long)nvpb->push;
-	req.nr_buffers = nvpb->nr_buffers;
-	req.buffers = (uint64_t)(unsigned long)nvpb->buffers;
-	req.nr_relocs = nvpb->nr_relocs;
-	req.relocs = (uint64_t)(unsigned long)nvpb->relocs;
-	req.suffix0 = nvpb->cal_suffix0;
-	req.suffix1 = nvpb->cal_suffix1;
-
-	do {
-		ret = drmCommandWriteRead(nvdev->fd, DRM_NOUVEAU_GEM_PUSHBUF,
+	if (nvpb->use_cal) {
+		struct drm_nouveau_gem_pushbuf_call req;
+
+		*(nvpb->base.cur++) = nvpb->cal_suffix0;
+		*(nvpb->base.cur++) = nvpb->cal_suffix1;
+		if (nvpb->base.remaining > 2) /* space() will fixup if not */
+			nvpb->base.remaining -= 2;
+
+restart_cal:
+		req.channel = chan->id;
+		req.handle = nvpb->buffer[nvpb->current]->handle;
+		req.offset = nvpb->current_offset * 4;
+		req.nr_buffers = nvpb->nr_buffers;
+		req.buffers = (uint64_t)(unsigned long)nvpb->buffers;
+		req.nr_relocs = nvpb->nr_relocs;
+		req.relocs = (uint64_t)(unsigned long)nvpb->relocs;
+		req.nr_dwords = (nvpb->base.cur - nvpb->pushbuf) -
+				nvpb->current_offset;
+		req.suffix0 = nvpb->cal_suffix0;
+		req.suffix1 = nvpb->cal_suffix1;
+		ret = drmCommandWriteRead(nvdev->fd, nvpb->no_aper_update ?
+					  DRM_NOUVEAU_GEM_PUSHBUF_CALL :
+					  DRM_NOUVEAU_GEM_PUSHBUF_CALL2,
 					  &req, sizeof(req));
-	} while (ret == -EAGAIN);
-	nvpb->cal_suffix0 = req.suffix0;
-	nvpb->cal_suffix1 = req.suffix1;
-	nvdev->base.vm_vram_size = req.vram_available;
-	nvdev->base.vm_gart_size = req.gart_available;
+		if (ret == -EAGAIN)
+			goto restart_cal;
+		nvpb->cal_suffix0 = req.suffix0;
+		nvpb->cal_suffix1 = req.suffix1;
+		if (!nvpb->no_aper_update) {
+			nvdev->base.vm_vram_size = req.vram_available;
+			nvdev->base.vm_gart_size = req.gart_available;
+		}
+	} else {
+		struct drm_nouveau_gem_pushbuf req;
+
+restart_push:
+		req.channel = chan->id;
+		req.nr_dwords = nvpb->size - nvpb->base.remaining;
+		req.dwords = (uint64_t)(unsigned long)nvpb->pushbuf;
+		req.nr_buffers = nvpb->nr_buffers;
+		req.buffers = (uint64_t)(unsigned long)nvpb->buffers;
+		req.nr_relocs = nvpb->nr_relocs;
+		req.relocs = (uint64_t)(unsigned long)nvpb->relocs;
+		ret = drmCommandWrite(nvdev->fd, DRM_NOUVEAU_GEM_PUSHBUF,
+				      &req, sizeof(req));
+		if (ret == -EAGAIN)
+			goto restart_push;
+	}
+
 
 	/* Update presumed offset/domain for any buffers that moved.
 	 * Dereference all buffers on validate list
 	 */
 	for (i = 0; i < nvpb->nr_relocs; i++) {
-		nouveau_pushbuf_bo_unref(nvpb, nvpb->relocs[i].bo_index);
-		nouveau_pushbuf_bo_unref(nvpb, nvpb->relocs[i].reloc_bo_index);
-	}
+		struct drm_nouveau_gem_pushbuf_reloc *r = &nvpb->relocs[i];
+		struct drm_nouveau_gem_pushbuf_bo *pbbo =
+			&nvpb->buffers[r->bo_index];
+		struct nouveau_bo *bo = (void *)(unsigned long)pbbo->user_priv;
+		struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
+
+		if (--nvbo->pending_refcnt)
+			continue;
+
+		if (pbbo->presumed_ok == 0) {
+			nvbo->domain = pbbo->presumed_domain;
+			nvbo->offset = pbbo->presumed_offset;
+		}
 
-	for (i = 0; i < nvpb->nr_push; i++)
-		nouveau_pushbuf_bo_unref(nvpb, nvpb->push[i].bo_index);
+		nvbo->pending = NULL;
+		nouveau_bo_ref(NULL, &bo);
+	}
 
 	nvpb->nr_buffers = 0;
 	nvpb->nr_relocs = 0;
-	nvpb->nr_push = 0;
 
 	/* Allocate space for next push buffer */
 	assert(!nouveau_pushbuf_space(chan, min));
@@ -275,7 +273,7 @@ nouveau_pushbuf_flush(struct nouveau_channel *chan, unsigned min)
 	if (chan->flush_notify)
 		chan->flush_notify(chan);
 
-	nvpb->marker = NULL;
+	nvpb->marker = 0;
 	return ret;
 }
 
@@ -283,7 +281,7 @@ int
 nouveau_pushbuf_marker_emit(struct nouveau_channel *chan,
 			    unsigned wait_dwords, unsigned wait_relocs)
 {
-	struct nouveau_pushbuf_priv *nvpb = &nouveau_channel(chan)->pb;
+	struct nouveau_pushbuf_priv *nvpb = nouveau_pushbuf(chan->pushbuf);
 
 	if (AVAIL_RING(chan) < wait_dwords)
 		return nouveau_pushbuf_flush(chan, wait_dwords);
@@ -291,9 +289,7 @@ nouveau_pushbuf_marker_emit(struct nouveau_channel *chan,
 	if (nvpb->nr_relocs + wait_relocs >= NOUVEAU_GEM_MAX_RELOCS)
 		return nouveau_pushbuf_flush(chan, wait_dwords);
 
-	nvpb->marker = chan->cur;
-	nvpb->marker_offset = nvpb->current_offset;
-	nvpb->marker_push = nvpb->nr_push;
+	nvpb->marker = nvpb->base.cur - nvpb->pushbuf;
 	nvpb->marker_relocs = nvpb->nr_relocs;
 	return 0;
 }
@@ -301,7 +297,7 @@ nouveau_pushbuf_marker_emit(struct nouveau_channel *chan,
 void
 nouveau_pushbuf_marker_undo(struct nouveau_channel *chan)
 {
-	struct nouveau_pushbuf_priv *nvpb = &nouveau_channel(chan)->pb;
+	struct nouveau_pushbuf_priv *nvpb = nouveau_pushbuf(chan->pushbuf);
 	unsigned i;
 
 	if (!nvpb->marker)
@@ -309,19 +305,49 @@ nouveau_pushbuf_marker_undo(struct nouveau_channel *chan)
 
 	/* undo any relocs/buffers added to the list since last marker */
 	for (i = nvpb->marker_relocs; i < nvpb->nr_relocs; i++) {
-		nouveau_pushbuf_bo_unref(nvpb, nvpb->relocs[i].bo_index);
-		nouveau_pushbuf_bo_unref(nvpb, nvpb->relocs[i].reloc_bo_index);
+		struct drm_nouveau_gem_pushbuf_reloc *r = &nvpb->relocs[i];
+		struct drm_nouveau_gem_pushbuf_bo *pbbo =
+			&nvpb->buffers[r->bo_index];
+		struct nouveau_bo *bo = (void *)(unsigned long)pbbo->user_priv;
+		struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
+
+		if (--nvbo->pending_refcnt)
+			continue;
+
+		nvbo->pending = NULL;
+		nouveau_bo_ref(NULL, &bo);
+		nvpb->nr_buffers--;
 	}
 	nvpb->nr_relocs = nvpb->marker_relocs;
 
-	for (i = nvpb->marker_push; i < nvpb->nr_push; i++)
-		nouveau_pushbuf_bo_unref(nvpb, nvpb->push[i].bo_index);
-	nvpb->nr_push = nvpb->marker_push;
-
 	/* reset pushbuf back to last marker */
-	chan->cur = nvpb->marker;
-	nvpb->current_offset = nvpb->marker_offset;
-	nvpb->marker = NULL;
+	nvpb->base.cur = nvpb->pushbuf + nvpb->marker;
+	nvpb->base.remaining = nvpb->size - nvpb->marker;
+	nvpb->marker = 0;
+}
+
+static uint32_t
+nouveau_pushbuf_calc_reloc(struct drm_nouveau_gem_pushbuf_bo *pbbo,
+			   struct drm_nouveau_gem_pushbuf_reloc *r)
+{
+	uint32_t push = 0;
+
+	if (r->flags & NOUVEAU_GEM_RELOC_LOW)
+		push = (pbbo->presumed_offset + r->data);
+	else
+	if (r->flags & NOUVEAU_GEM_RELOC_HIGH)
+		push = (pbbo->presumed_offset + r->data) >> 32;
+	else
+		push = r->data;
+
+	if (r->flags & NOUVEAU_GEM_RELOC_OR) {
+		if (pbbo->presumed_domain & NOUVEAU_GEM_DOMAIN_VRAM)
+			push |= r->vor;
+		else
+			push |= r->tor;
+	}
+
+	return push;
 }
 
 int
@@ -329,15 +355,66 @@ nouveau_pushbuf_emit_reloc(struct nouveau_channel *chan, void *ptr,
 			   struct nouveau_bo *bo, uint32_t data, uint32_t data2,
 			   uint32_t flags, uint32_t vor, uint32_t tor)
 {
-	struct nouveau_pushbuf_priv *nvpb = &nouveau_channel(chan)->pb;
-	int ret;
+	struct nouveau_pushbuf_priv *nvpb = nouveau_pushbuf(chan->pushbuf);
+	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
+	struct drm_nouveau_gem_pushbuf_reloc *r;
+	struct drm_nouveau_gem_pushbuf_bo *pbbo;
+	uint32_t domains = 0;
 
-	ret = nouveau_reloc_emit(chan, nvpb->buffer[nvpb->current],
-				 (char *)ptr - (char *)nvpb->pushbuf, ptr,
-				 bo, data, data2, flags, vor, tor);
-	if (ret)
-		return ret;
+	if (nvpb->nr_relocs >= NOUVEAU_GEM_MAX_RELOCS) {
+		fprintf(stderr, "too many relocs!!\n");
+		return -ENOMEM;
+	}
+
+	if (nvbo->user && (flags & NOUVEAU_BO_WR)) {
+		fprintf(stderr, "write to user buffer!!\n");
+		return -EINVAL;
+	}
+
+	pbbo = nouveau_bo_emit_buffer(chan, bo);
+	if (!pbbo) {
+		fprintf(stderr, "buffer emit fail :(\n");
+		return -ENOMEM;
+	}
+
+	nvbo->pending_refcnt++;
+
+	if (flags & NOUVEAU_BO_VRAM)
+		domains |= NOUVEAU_GEM_DOMAIN_VRAM;
+	if (flags & NOUVEAU_BO_GART)
+		domains |= NOUVEAU_GEM_DOMAIN_GART;
+
+	if (!(pbbo->valid_domains & domains)) {
+		fprintf(stderr, "no valid domains remain!\n");
+		return -EINVAL;
+	}
+	pbbo->valid_domains &= domains;
+
+	assert(flags & NOUVEAU_BO_RDWR);
+	if (flags & NOUVEAU_BO_RD) {
+		pbbo->read_domains |= domains;
+	}
+	if (flags & NOUVEAU_BO_WR) {
+		pbbo->write_domains |= domains;
+		nvbo->write_marker = 1;
+	}
 
+	r = nvpb->relocs + nvpb->nr_relocs++;
+	r->bo_index = pbbo - nvpb->buffers;
+	r->reloc_index = (uint32_t *)ptr - nvpb->pushbuf;
+	r->flags = 0;
+	if (flags & NOUVEAU_BO_LOW)
+		r->flags |= NOUVEAU_GEM_RELOC_LOW;
+	if (flags & NOUVEAU_BO_HIGH)
+		r->flags |= NOUVEAU_GEM_RELOC_HIGH;
+	if (flags & NOUVEAU_BO_OR)
+		r->flags |= NOUVEAU_GEM_RELOC_OR;
+	r->data = data;
+	r->vor = vor;
+	r->tor = tor;
+
+	*(uint32_t *)ptr = (flags & NOUVEAU_BO_DUMMY) ? 0 :
+		nouveau_pushbuf_calc_reloc(pbbo, r);
 	return 0;
 }
 
diff --git a/nouveau/nouveau_pushbuf.h b/nouveau/nouveau_pushbuf.h
index 52d13a0..46982af 100644
--- a/nouveau/nouveau_pushbuf.h
+++ b/nouveau/nouveau_pushbuf.h
@@ -29,6 +29,13 @@
 #include "nouveau_bo.h"
 #include "nouveau_grobj.h"
 
+struct nouveau_pushbuf {
+	struct nouveau_channel *channel;
+
+	unsigned remaining;
+	uint32_t *cur;
+};
+
 int
 nouveau_pushbuf_flush(struct nouveau_channel *, unsigned min);
 
@@ -44,10 +51,6 @@ nouveau_pushbuf_emit_reloc(struct nouveau_channel *, void *ptr,
 			   struct nouveau_bo *, uint32_t data, uint32_t data2,
 			   uint32_t flags, uint32_t vor, uint32_t tor);
 
-int
-nouveau_pushbuf_submit(struct nouveau_channel *chan, struct nouveau_bo *bo,
-		       unsigned offset, unsigned length);
-
 /* Push buffer access macros */
 static __inline__ int
 MARK_RING(struct nouveau_channel *chan, unsigned dwords, unsigned relocs)
@@ -64,14 +67,14 @@ MARK_UNDO(struct nouveau_channel *chan)
 static __inline__ void
 OUT_RING(struct nouveau_channel *chan, unsigned data)
 {
-	*(chan->cur++) = (data);
+	*(chan->pushbuf->cur++) = (data);
 }
 
 static __inline__ void
 OUT_RINGp(struct nouveau_channel *chan, const void *data, unsigned size)
 {
-	memcpy(chan->cur, data, size * 4);
-	chan->cur += size;
+	memcpy(chan->pushbuf->cur, data, size * 4);
+	chan->pushbuf->cur += size;
 }
 
 static __inline__ void
@@ -85,13 +88,13 @@ OUT_RINGf(struct nouveau_channel *chan, float f)
 static __inline__ unsigned
 AVAIL_RING(struct nouveau_channel *chan)
 {
-	return chan->end - chan->cur;
+	return chan->pushbuf->remaining;
 }
 
 static __inline__ void
 WAIT_RING(struct nouveau_channel *chan, unsigned size)
 {
-	if (chan->cur + size > chan->end)
+	if (chan->pushbuf->remaining < size)
 		nouveau_pushbuf_flush(chan, size);
 }
 
@@ -105,6 +108,7 @@ BEGIN_RING(struct nouveau_channel *chan, struct nouveau_grobj *gr,
 
 	WAIT_RING(chan, size + 1);
 	OUT_RING(chan, (gr->subc << 13) | (size << 18) | mthd);
+	chan->pushbuf->remaining -= (size + 1);
 }
 
 /* non-incrementing BEGIN_RING */
@@ -143,7 +147,7 @@ static __inline__ int
 OUT_RELOC(struct nouveau_channel *chan, struct nouveau_bo *bo,
 	  unsigned data, unsigned flags, unsigned vor, unsigned tor)
 {
-	return nouveau_pushbuf_emit_reloc(chan, chan->cur++, bo,
+	return nouveau_pushbuf_emit_reloc(chan, chan->pushbuf->cur++, bo,
 					  data, 0, flags, vor, tor);
 }
 
@@ -152,7 +156,7 @@ OUT_RELOC2(struct nouveau_channel *chan, struct nouveau_bo *bo,
 	   unsigned data, unsigned data2, unsigned flags,
 	   unsigned vor, unsigned tor)
 {
-	return nouveau_pushbuf_emit_reloc(chan, chan->cur++, bo,
+	return nouveau_pushbuf_emit_reloc(chan, chan->pushbuf->cur++, bo,
 					  data, data2, flags, vor, tor);
 }
 
diff --git a/nouveau/nouveau_reloc.c b/nouveau/nouveau_reloc.c
deleted file mode 100644
index 332dfa0..0000000
--- a/nouveau/nouveau_reloc.c
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright 2010 Nouveau Project
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
- * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
- * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <errno.h>
-#include <assert.h>
-
-#include "nouveau_private.h"
-
-static uint32_t
-nouveau_reloc_calc(struct drm_nouveau_gem_pushbuf_bo *pbbo,
-		   struct drm_nouveau_gem_pushbuf_reloc *r)
-{
-	uint32_t push = 0;
-
-	if (r->flags & NOUVEAU_GEM_RELOC_LOW)
-		push = (pbbo->presumed.offset + r->data);
-	else
-	if (r->flags & NOUVEAU_GEM_RELOC_HIGH)
-		push = (pbbo->presumed.offset + r->data) >> 32;
-	else
-		push = r->data;
-
-	if (r->flags & NOUVEAU_GEM_RELOC_OR) {
-		if (pbbo->presumed.domain & NOUVEAU_GEM_DOMAIN_VRAM)
-			push |= r->vor;
-		else
-			push |= r->tor;
-	}
-
-	return push;
-}
-
-int
-nouveau_reloc_emit(struct nouveau_channel *chan, struct nouveau_bo *reloc_bo,
-		   uint32_t reloc_offset, uint32_t *reloc_ptr,
-		   struct nouveau_bo *bo, uint32_t data, uint32_t data2,
-		   uint32_t flags, uint32_t vor, uint32_t tor)
-{
-	struct nouveau_pushbuf_priv *nvpb = &nouveau_channel(chan)->pb;
-	struct nouveau_bo_priv *nvbo = nouveau_bo(bo);
-	struct drm_nouveau_gem_pushbuf_reloc *r;
-	struct drm_nouveau_gem_pushbuf_bo *pbbo, *rpbbo;
-	uint32_t domains = 0;
-
-	if (nvpb->nr_relocs >= NOUVEAU_GEM_MAX_RELOCS) {
-		fprintf(stderr, "too many relocs!!\n");
-		return -ENOMEM;
-	}
-
-	if (nvbo->user && (flags & NOUVEAU_BO_WR)) {
-		fprintf(stderr, "write to user buffer!!\n");
-		return -EINVAL;
-	}
-
-	/* We're about to reloc a user buffer, better make sure we don't cause
-	 * a double migration.
-	 */
-	if (!(nvbo->flags & (NOUVEAU_BO_GART | NOUVEAU_BO_VRAM)))
-		nvbo->flags |= (flags & (NOUVEAU_BO_GART | NOUVEAU_BO_VRAM));
-
-	rpbbo = nouveau_bo_emit_buffer(chan, reloc_bo);
-	if (!rpbbo)
-		return -ENOMEM;
-	nouveau_bo(reloc_bo)->pending_refcnt++;
-
-	pbbo = nouveau_bo_emit_buffer(chan, bo);
-	if (!pbbo) {
-		fprintf(stderr, "buffer emit fail :(\n");
-		return -ENOMEM;
-	}
-	nouveau_bo(bo)->pending_refcnt++;
-
-	if (flags & NOUVEAU_BO_VRAM)
-		domains |= NOUVEAU_GEM_DOMAIN_VRAM;
-	if (flags & NOUVEAU_BO_GART)
-		domains |= NOUVEAU_GEM_DOMAIN_GART;
-
-	if (!(pbbo->valid_domains & domains)) {
-		fprintf(stderr, "no valid domains remain!\n");
-		return -EINVAL;
-	}
-	pbbo->valid_domains &= domains;
-
-	assert(flags & NOUVEAU_BO_RDWR);
-	if (flags & NOUVEAU_BO_RD) {
-		pbbo->read_domains |= domains;
-	}
-	if (flags & NOUVEAU_BO_WR) {
-		pbbo->write_domains |= domains;
-		nvbo->write_marker = 1;
-	}
-
-	r = nvpb->relocs + nvpb->nr_relocs++;
-	r->reloc_bo_index = rpbbo - nvpb->buffers;
-	r->reloc_bo_offset = reloc_offset;
-	r->bo_index = pbbo - nvpb->buffers;
-	r->flags = 0;
-	if (flags & NOUVEAU_BO_LOW)
-		r->flags |= NOUVEAU_GEM_RELOC_LOW;
-	if (flags & NOUVEAU_BO_HIGH)
-		r->flags |= NOUVEAU_GEM_RELOC_HIGH;
-	if (flags & NOUVEAU_BO_OR)
-		r->flags |= NOUVEAU_GEM_RELOC_OR;
-	r->data = data;
-	r->vor = vor;
-	r->tor = tor;
-
-	if (reloc_ptr) {
-		if (flags & NOUVEAU_BO_DUMMY)
-			*reloc_ptr = 0;
-		else
-			*reloc_ptr = nouveau_reloc_calc(pbbo, r);
-	}
-
-	return 0;
-}
-
diff --git a/nouveau/nouveau_reloc.h b/nouveau/nouveau_reloc.h
deleted file mode 100644
index 24ddb52..0000000
--- a/nouveau/nouveau_reloc.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright 2010 Nouveau Project
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
- * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
- * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-
-#ifndef __NOUVEAU_RELOC_H__
-#define __NOUVEAU_RELOC_H__
-
-int
-nouveau_reloc_emit(struct nouveau_channel *chan, struct nouveau_bo *reloc_bo,
-		   uint32_t reloc_offset, uint32_t *reloc_ptr,
-		   struct nouveau_bo *bo, uint32_t data, uint32_t data2,
-		   uint32_t flags, uint32_t vor, uint32_t tor);
-
-#endif
